
build/gradient_adaptive.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      18:	0c 94 45 02 	jmp	0x48a	; 0x48a <__vector_6>
      1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      2c:	0c 94 5c 09 	jmp	0x12b8	; 0x12b8 <__vector_11>
      30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      38:	0c 94 bb 08 	jmp	0x1176	; 0x1176 <__vector_14>
      3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      5c:	0c 94 7c 09 	jmp	0x12f8	; 0x12f8 <__vector_23>
      60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      74:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      76:	0f b6       	in	r0, 0x3f	; 63
      78:	f8 94       	cli
      7a:	a8 95       	wdr
      7c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
      80:	88 61       	ori	r24, 0x18	; 24
      82:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
      86:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
      8a:	0f be       	out	0x3f, r0	; 63

0000008c <__do_copy_data>:
      8c:	11 e0       	ldi	r17, 0x01	; 1
      8e:	a0 e0       	ldi	r26, 0x00	; 0
      90:	b1 e0       	ldi	r27, 0x01	; 1
      92:	ee e2       	ldi	r30, 0x2E	; 46
      94:	f0 e2       	ldi	r31, 0x20	; 32
      96:	02 c0       	rjmp	.+4      	; 0x9c <__do_copy_data+0x10>
      98:	05 90       	lpm	r0, Z+
      9a:	0d 92       	st	X+, r0
      9c:	ac 30       	cpi	r26, 0x0C	; 12
      9e:	b1 07       	cpc	r27, r17
      a0:	d9 f7       	brne	.-10     	; 0x98 <__do_copy_data+0xc>

000000a2 <__do_clear_bss>:
      a2:	21 e0       	ldi	r18, 0x01	; 1
      a4:	ac e0       	ldi	r26, 0x0C	; 12
      a6:	b1 e0       	ldi	r27, 0x01	; 1
      a8:	01 c0       	rjmp	.+2      	; 0xac <.do_clear_bss_start>

000000aa <.do_clear_bss_loop>:
      aa:	1d 92       	st	X+, r1

000000ac <.do_clear_bss_start>:
      ac:	ac 38       	cpi	r26, 0x8C	; 140
      ae:	b2 07       	cpc	r27, r18
      b0:	e1 f7       	brne	.-8      	; 0xaa <.do_clear_bss_loop>
      b2:	0e 94 bd 0c 	call	0x197a	; 0x197a <main>
      b6:	0c 94 03 10 	jmp	0x2006	; 0x2006 <_exit>

000000ba <__bad_interrupt>:
      ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <message_rx>:
uint8_t my_gradient_value;  // gradient of the bot
message_t transmitting; // Message struct for transmitted message. Defined on kilobotics
uint8_t rcvd_gradient = GRADIENT_MAX;   // Initialize recieved gradient as max value

void message_rx(message_t *msg, distance_measurement_t *dist) {
    rcvd_gradient = msg->data[0]; // Recieved gradient
      be:	fc 01       	movw	r30, r24
      c0:	80 81       	ld	r24, Z
      c2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <rcvd_gradient>
//    rcvd_message = *msg;
    new_message = 1;    // New message flag
      c6:	81 e0       	ldi	r24, 0x01	; 1
      c8:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
}
      cc:	08 95       	ret

000000ce <message_tx>:

message_t *message_tx() {
    return &transmitting;
}
      ce:	82 e2       	ldi	r24, 0x22	; 34
      d0:	91 e0       	ldi	r25, 0x01	; 1
      d2:	08 95       	ret

000000d4 <setup>:


void setup() {
    last_changed = kilo_ticks;  // Set initial clock cycle
      d4:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <kilo_ticks>
      d8:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <kilo_ticks+0x1>
      dc:	a0 91 53 01 	lds	r26, 0x0153	; 0x800153 <kilo_ticks+0x2>
      e0:	b0 91 54 01 	lds	r27, 0x0154	; 0x800154 <kilo_ticks+0x3>
      e4:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <last_changed>
      e8:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <last_changed+0x1>
      ec:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <last_changed+0x2>
      f0:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <last_changed+0x3>

    // Set gradient of 0 for the seed, else 255
    if (kilo_uid == SEED_ID) {
      f4:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <kilo_uid>
      f8:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <kilo_uid+0x1>
      fc:	8a 97       	sbiw	r24, 0x2a	; 42
      fe:	81 f0       	breq	.+32     	; 0x120 <setup+0x4c>
        my_gradient_value = 0;
    } else {
        my_gradient_value = GRADIENT_MAX;
     100:	8f ef       	ldi	r24, 0xFF	; 255
     102:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <my_gradient_value>
    }
    transmitting.type = NORMAL;
     106:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <transmitting+0x9>
    transmitting.data[0] = my_gradient_value;   // Transmit starting gradient (0 if seed, else 255 )
     10a:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <transmitting>
    transmitting.crc = message_crc(&transmitting);  // You must set the CRC value before transmission
     10e:	82 e2       	ldi	r24, 0x22	; 34
     110:	91 e0       	ldi	r25, 0x01	; 1
     112:	0e 94 82 0b 	call	0x1704	; 0x1704 <message_crc>
     116:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <transmitting+0xb>
     11a:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <transmitting+0xa>
}
     11e:	08 95       	ret
        my_gradient_value = 0;
     120:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <my_gradient_value>
     124:	80 e0       	ldi	r24, 0x00	; 0
     126:	ef cf       	rjmp	.-34     	; 0x106 <setup+0x32>

00000128 <loop>:

void loop() {
     128:	cf 92       	push	r12
     12a:	df 92       	push	r13
     12c:	ef 92       	push	r14
     12e:	ff 92       	push	r15
    if (kilo_uid != SEED_ID) {
     130:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <kilo_uid>
     134:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <kilo_uid+0x1>
     138:	8a 97       	sbiw	r24, 0x2a	; 42
     13a:	09 f4       	brne	.+2      	; 0x13e <loop+0x16>
     13c:	7c c0       	rjmp	.+248    	; 0x236 <loop+0x10e>

        // If no messages recieved from lower gradient bot in 64 clock cycles
        // reset the clock and gradient
        //**** Every 2 seconds, check for message from closer bot
        if (kilo_ticks > (last_changed + 2*SECOND)) {
     13e:	40 91 51 01 	lds	r20, 0x0151	; 0x800151 <kilo_ticks>
     142:	50 91 52 01 	lds	r21, 0x0152	; 0x800152 <kilo_ticks+0x1>
     146:	60 91 53 01 	lds	r22, 0x0153	; 0x800153 <kilo_ticks+0x2>
     14a:	70 91 54 01 	lds	r23, 0x0154	; 0x800154 <kilo_ticks+0x3>
     14e:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__data_end>
     152:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <last_changed>
     156:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <last_changed+0x1>
     15a:	a0 91 0f 01 	lds	r26, 0x010F	; 0x80010f <last_changed+0x2>
     15e:	b0 91 10 01 	lds	r27, 0x0110	; 0x800110 <last_changed+0x3>
     162:	80 5c       	subi	r24, 0xC0	; 192
     164:	9f 4f       	sbci	r25, 0xFF	; 255
     166:	af 4f       	sbci	r26, 0xFF	; 255
     168:	bf 4f       	sbci	r27, 0xFF	; 255
     16a:	84 17       	cp	r24, r20
     16c:	95 07       	cpc	r25, r21
     16e:	a6 07       	cpc	r26, r22
     170:	b7 07       	cpc	r27, r23
     172:	80 f1       	brcs	.+96     	; 0x1d4 <loop+0xac>
            last_changed = kilo_ticks;
            my_gradient_value = GRADIENT_MAX;
        }
        if (new_message == 1) {
     174:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <my_gradient_value>
     178:	49 2f       	mov	r20, r25
     17a:	50 e0       	ldi	r21, 0x00	; 0
     17c:	ba 01       	movw	r22, r20
     17e:	61 50       	subi	r22, 0x01	; 1
     180:	71 09       	sbc	r23, r1
     182:	21 30       	cpi	r18, 0x01	; 1
     184:	09 f4       	brne	.+2      	; 0x188 <loop+0x60>
     186:	40 c0       	rjmp	.+128    	; 0x208 <loop+0xe0>
        }
    }

    // Set gradient color
    if (my_gradient_value == 0) {
        set_color(RGB(1, 1, 1));
     188:	85 e1       	ldi	r24, 0x15	; 21
    if (my_gradient_value == 0) {
     18a:	99 23       	and	r25, r25
     18c:	09 f4       	brne	.+2      	; 0x190 <loop+0x68>
     18e:	4d c0       	rjmp	.+154    	; 0x22a <loop+0x102>

    } else if (my_gradient_value == GRADIENT_MAX) {
     190:	9f 3f       	cpi	r25, 0xFF	; 255
     192:	09 f4       	brne	.+2      	; 0x196 <loop+0x6e>
     194:	53 c0       	rjmp	.+166    	; 0x23c <loop+0x114>
        set_color(RGB(1, 1, 0));

    } else if (my_gradient_value % 5 == 1) {
     196:	8d ec       	ldi	r24, 0xCD	; 205
     198:	98 9f       	mul	r25, r24
     19a:	81 2d       	mov	r24, r1
     19c:	11 24       	eor	r1, r1
     19e:	28 2f       	mov	r18, r24
     1a0:	26 95       	lsr	r18
     1a2:	26 95       	lsr	r18
     1a4:	8c 7f       	andi	r24, 0xFC	; 252
     1a6:	82 0f       	add	r24, r18
     1a8:	29 2f       	mov	r18, r25
     1aa:	28 1b       	sub	r18, r24
        set_color(RGB(1, 0, 0));
     1ac:	81 e0       	ldi	r24, 0x01	; 1
    } else if (my_gradient_value % 5 == 1) {
     1ae:	21 30       	cpi	r18, 0x01	; 1
     1b0:	e1 f1       	breq	.+120    	; 0x22a <loop+0x102>

    } else if (my_gradient_value % 5 == 2) {
        set_color(RGB(0, 1, 0));
     1b2:	84 e0       	ldi	r24, 0x04	; 4
    } else if (my_gradient_value % 5 == 2) {
     1b4:	22 30       	cpi	r18, 0x02	; 2
     1b6:	c9 f1       	breq	.+114    	; 0x22a <loop+0x102>

    } else if (my_gradient_value % 5 == 3) {
        set_color(RGB(0, 0, 1));
     1b8:	80 e1       	ldi	r24, 0x10	; 16
    } else if (my_gradient_value % 5 == 3) {
     1ba:	23 30       	cpi	r18, 0x03	; 3
     1bc:	b1 f1       	breq	.+108    	; 0x22a <loop+0x102>

    } else if (my_gradient_value % 5 == 4) {
        set_color(RGB(1, 0, 1));
     1be:	81 e1       	ldi	r24, 0x11	; 17
    } else if (my_gradient_value % 5 == 4) {
     1c0:	24 30       	cpi	r18, 0x04	; 4
     1c2:	99 f1       	breq	.+102    	; 0x22a <loop+0x102>

    } else if (my_gradient_value % 5 == 0) {
     1c4:	22 23       	and	r18, r18
     1c6:	09 f4       	brne	.+2      	; 0x1ca <loop+0xa2>
     1c8:	61 c0       	rjmp	.+194    	; 0x28c <loop+0x164>
        set_color(RGB(0, 1, 1));

    }
}
     1ca:	ff 90       	pop	r15
     1cc:	ef 90       	pop	r14
     1ce:	df 90       	pop	r13
     1d0:	cf 90       	pop	r12
     1d2:	08 95       	ret
            last_changed = kilo_ticks;
     1d4:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <kilo_ticks>
     1d8:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <kilo_ticks+0x1>
     1dc:	a0 91 53 01 	lds	r26, 0x0153	; 0x800153 <kilo_ticks+0x2>
     1e0:	b0 91 54 01 	lds	r27, 0x0154	; 0x800154 <kilo_ticks+0x3>
     1e4:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <last_changed>
     1e8:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <last_changed+0x1>
     1ec:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <last_changed+0x2>
     1f0:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <last_changed+0x3>
            my_gradient_value = GRADIENT_MAX;
     1f4:	8f ef       	ldi	r24, 0xFF	; 255
     1f6:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <my_gradient_value>
        if (new_message == 1) {
     1fa:	21 30       	cpi	r18, 0x01	; 1
     1fc:	f9 f4       	brne	.+62     	; 0x23c <loop+0x114>
     1fe:	6e ef       	ldi	r22, 0xFE	; 254
     200:	70 e0       	ldi	r23, 0x00	; 0
     202:	4f ef       	ldi	r20, 0xFF	; 255
     204:	50 e0       	ldi	r21, 0x00	; 0
     206:	9f ef       	ldi	r25, 0xFF	; 255
            if (rcvd_gradient == my_gradient_value - 1)  {
     208:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <rcvd_gradient>
     20c:	28 2f       	mov	r18, r24
     20e:	30 e0       	ldi	r19, 0x00	; 0
     210:	26 17       	cp	r18, r22
     212:	37 07       	cpc	r19, r23
     214:	d1 f0       	breq	.+52     	; 0x24a <loop+0x122>
            if (my_gradient_value > (rcvd_gradient + 1)) {
     216:	2f 5f       	subi	r18, 0xFF	; 255
     218:	3f 4f       	sbci	r19, 0xFF	; 255
     21a:	24 17       	cp	r18, r20
     21c:	35 07       	cpc	r19, r21
     21e:	34 f1       	brlt	.+76     	; 0x26c <loop+0x144>
            new_message = 0; // reset new message flag
     220:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
        set_color(RGB(1, 1, 1));
     224:	85 e1       	ldi	r24, 0x15	; 21
    if (my_gradient_value == 0) {
     226:	91 11       	cpse	r25, r1
     228:	b3 cf       	rjmp	.-154    	; 0x190 <loop+0x68>
}
     22a:	ff 90       	pop	r15
     22c:	ef 90       	pop	r14
     22e:	df 90       	pop	r13
     230:	cf 90       	pop	r12
        set_color(RGB(0, 1, 1));
     232:	0c 94 38 09 	jmp	0x1270	; 0x1270 <set_color>
     236:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <my_gradient_value>
     23a:	a6 cf       	rjmp	.-180    	; 0x188 <loop+0x60>
        set_color(RGB(1, 1, 0));
     23c:	85 e0       	ldi	r24, 0x05	; 5
}
     23e:	ff 90       	pop	r15
     240:	ef 90       	pop	r14
     242:	df 90       	pop	r13
     244:	cf 90       	pop	r12
        set_color(RGB(0, 1, 1));
     246:	0c 94 38 09 	jmp	0x1270	; 0x1270 <set_color>
                last_changed = kilo_ticks;
     24a:	c0 90 51 01 	lds	r12, 0x0151	; 0x800151 <kilo_ticks>
     24e:	d0 90 52 01 	lds	r13, 0x0152	; 0x800152 <kilo_ticks+0x1>
     252:	e0 90 53 01 	lds	r14, 0x0153	; 0x800153 <kilo_ticks+0x2>
     256:	f0 90 54 01 	lds	r15, 0x0154	; 0x800154 <kilo_ticks+0x3>
     25a:	c0 92 0d 01 	sts	0x010D, r12	; 0x80010d <last_changed>
     25e:	d0 92 0e 01 	sts	0x010E, r13	; 0x80010e <last_changed+0x1>
     262:	e0 92 0f 01 	sts	0x010F, r14	; 0x80010f <last_changed+0x2>
     266:	f0 92 10 01 	sts	0x0110, r15	; 0x800110 <last_changed+0x3>
     26a:	d5 cf       	rjmp	.-86     	; 0x216 <loop+0xee>
                my_gradient_value = (rcvd_gradient + 1);
     26c:	8f 5f       	subi	r24, 0xFF	; 255
     26e:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <my_gradient_value>
                transmitting.data[0] = my_gradient_value;
     272:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <transmitting>
                transmitting.crc = message_crc(&transmitting);
     276:	82 e2       	ldi	r24, 0x22	; 34
     278:	91 e0       	ldi	r25, 0x01	; 1
     27a:	0e 94 82 0b 	call	0x1704	; 0x1704 <message_crc>
     27e:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <transmitting+0xb>
     282:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <transmitting+0xa>
     286:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <my_gradient_value>
     28a:	ca cf       	rjmp	.-108    	; 0x220 <loop+0xf8>
        set_color(RGB(0, 1, 1));
     28c:	84 e1       	ldi	r24, 0x14	; 20
     28e:	cd cf       	rjmp	.-102    	; 0x22a <loop+0x102>

00000290 <message_rx_dummy>:
void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     290:	08 95       	ret

00000292 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	80 e0       	ldi	r24, 0x00	; 0
     296:	08 95       	ret

00000298 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     298:	08 95       	ret

0000029a <set_color.constprop.1>:

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     29a:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     29c:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     29e:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     2a0:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     2a2:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     2a4:	3c 98       	cbi	0x07, 4	; 7
}
     2a6:	08 95       	ret

000002a8 <set_color.constprop.4>:
        DDRD |= (1<<5);
     2a8:	55 9a       	sbi	0x0a, 5	; 10
        DDRD |= (1<<4);
     2aa:	54 9a       	sbi	0x0a, 4	; 10
        DDRC &= ~(1<<3);
     2ac:	3b 98       	cbi	0x07, 3	; 7
        DDRC &= ~(1<<2);
     2ae:	3a 98       	cbi	0x07, 2	; 7
        DDRC &= ~(1<<5);
     2b0:	3d 98       	cbi	0x07, 5	; 7
        DDRC &= ~(1<<4);
     2b2:	3c 98       	cbi	0x07, 4	; 7
}
     2b4:	08 95       	ret

000002b6 <set_color.constprop.6>:
        DDRD &= ~(1<<5);
     2b6:	55 98       	cbi	0x0a, 5	; 10
        DDRD &= ~(1<<4);
     2b8:	54 98       	cbi	0x0a, 4	; 10
        DDRC &= ~(1<<3);
     2ba:	3b 98       	cbi	0x07, 3	; 7
        DDRC &= ~(1<<2);
     2bc:	3a 98       	cbi	0x07, 2	; 7
        DDRC &= ~(1<<5);
     2be:	3d 98       	cbi	0x07, 5	; 7
        DDRC &= ~(1<<4);
     2c0:	3c 98       	cbi	0x07, 4	; 7
}
     2c2:	08 95       	ret

000002c4 <kilo_init>:
void kilo_init() {
     2c4:	bf 92       	push	r11
     2c6:	cf 92       	push	r12
     2c8:	df 92       	push	r13
     2ca:	ef 92       	push	r14
     2cc:	ff 92       	push	r15
     2ce:	0f 93       	push	r16
     2d0:	1f 93       	push	r17
     2d2:	cf 93       	push	r28
     2d4:	df 93       	push	r29
    cli();
     2d6:	f8 94       	cli
    ports_off();
     2d8:	14 b8       	out	0x04, r1	; 4
     2da:	17 b8       	out	0x07, r1	; 7
     2dc:	1a b8       	out	0x0a, r1	; 10
     2de:	15 b8       	out	0x05, r1	; 5
     2e0:	18 b8       	out	0x08, r1	; 8
     2e2:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     2e4:	52 9a       	sbi	0x0a, 2	; 10
     2e6:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     2e8:	14 bc       	out	0x24, r1	; 36
     2ea:	85 e0       	ldi	r24, 0x05	; 5
     2ec:	85 bd       	out	0x25, r24	; 37
     2ee:	8f ef       	ldi	r24, 0xFF	; 255
     2f0:	87 bd       	out	0x27, r24	; 39
     2f2:	82 e0       	ldi	r24, 0x02	; 2
     2f4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    rx_timer_setup();
     2f8:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     2fc:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     300:	2f e8       	ldi	r18, 0x8F	; 143
     302:	3b e0       	ldi	r19, 0x0B	; 11
     304:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     308:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     30c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    motors_setup();
     310:	53 98       	cbi	0x0a, 3	; 10
     312:	23 98       	cbi	0x04, 3	; 4
     314:	91 ea       	ldi	r25, 0xA1	; 161
     316:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     31a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
     31e:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
     322:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    acomp_setup();
     326:	8b e0       	ldi	r24, 0x0B	; 11
     328:	80 bf       	out	0x30, r24	; 48
     32a:	83 e0       	ldi	r24, 0x03	; 3
     32c:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__TEXT_REGION_LENGTH__+0x7e007f>
    adc_setup();
     330:	86 e0       	ldi	r24, 0x06	; 6
     332:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     336:	83 e8       	ldi	r24, 0x83	; 131
     338:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     33c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     340:	80 64       	ori	r24, 0x40	; 64
     342:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     346:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     34a:	86 fd       	sbrc	r24, 6
     34c:	fc cf       	rjmp	.-8      	; 0x346 <kilo_init+0x82>
    adc_trigger_high_gain();
     34e:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     352:	83 ea       	ldi	r24, 0xA3	; 163
     354:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     35e:	81 e0       	ldi	r24, 0x01	; 1
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <eeprom_read_byte>
    if (osccal != 0xFF)
     366:	8f 3f       	cpi	r24, 0xFF	; 255
     368:	11 f0       	breq	.+4      	; 0x36e <kilo_init+0xaa>
        OSCCAL = osccal;
     36a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__TEXT_REGION_LENGTH__+0x7e0066>
    rx_busy = 0;
     36e:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <rx_busy>
    rx_leadingbit = 1;
     372:	c1 e0       	ldi	r28, 0x01	; 1
     374:	c0 93 2e 01 	sts	0x012E, r28	; 0x80012e <rx_leadingbit>
    rx_leadingbyte = 1;
     378:	c0 93 72 01 	sts	0x0172, r28	; 0x800172 <rx_leadingbyte>
    rx_byteindex = 0;
     37c:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <rx_byteindex>
    rx_bytevalue = 0;
     380:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <rx_bytevalue>
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     384:	80 e9       	ldi	r24, 0x90	; 144
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <eeprom_read_byte>
     38c:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <tx_mask>
    if (tx_mask & ~TX_MASK_MAX)
     390:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <tx_mask>
     394:	88 73       	andi	r24, 0x38	; 56
     396:	11 f0       	breq	.+4      	; 0x39c <kilo_init+0xd8>
        tx_mask = TX_MASK_MIN;
     398:	c0 93 4b 01 	sts	0x014B, r28	; 0x80014b <tx_mask>
    tx_clock = 0;
     39c:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <tx_clock+0x1>
     3a0:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <tx_clock>
    tx_increment = 255;
     3a4:	8f ef       	ldi	r24, 0xFF	; 255
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	90 93 74 01 	sts	0x0174, r25	; 0x800174 <tx_increment+0x1>
     3ac:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <tx_increment>
    kilo_ticks = 0;
     3b0:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <kilo_ticks>
     3b4:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <kilo_ticks+0x1>
     3b8:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <kilo_ticks+0x2>
     3bc:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <kilo_ticks+0x3>
    kilo_state = IDLE;
     3c0:	81 e0       	ldi	r24, 0x01	; 1
     3c2:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <kilo_state>
    kilo_tx_period = 3906;
     3c6:	82 e4       	ldi	r24, 0x42	; 66
     3c8:	9f e0       	ldi	r25, 0x0F	; 15
     3ca:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <kilo_tx_period+0x1>
     3ce:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <kilo_tx_period>
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     3d2:	80 eb       	ldi	r24, 0xB0	; 176
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <eeprom_read_byte>
     3da:	c8 2f       	mov	r28, r24
     3dc:	81 eb       	ldi	r24, 0xB1	; 177
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <eeprom_read_byte>
     3e4:	d8 2f       	mov	r29, r24
     3e6:	d0 93 88 01 	sts	0x0188, r29	; 0x800188 <kilo_uid+0x1>
     3ea:	c0 93 87 01 	sts	0x0187, r28	; 0x800187 <kilo_uid>
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     3ee:	85 e0       	ldi	r24, 0x05	; 5
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <eeprom_read_byte>
     3f6:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <kilo_turn_left>
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     3fa:	89 e0       	ldi	r24, 0x09	; 9
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <eeprom_read_byte>
     402:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <kilo_turn_right>
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     406:	8c e0       	ldi	r24, 0x0C	; 12
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <eeprom_read_byte>
     40e:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <kilo_straight_left>
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     412:	84 e1       	ldi	r24, 0x14	; 20
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <eeprom_read_byte>
     41a:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <kilo_straight_right>
    for (i=0; i<14; i++) {
     41e:	06 e5       	ldi	r16, 0x56	; 86
     420:	11 e0       	ldi	r17, 0x01	; 1
     422:	8f e2       	ldi	r24, 0x2F	; 47
     424:	e8 2e       	mov	r14, r24
     426:	81 e0       	ldi	r24, 0x01	; 1
     428:	f8 2e       	mov	r15, r24
     42a:	92 e7       	ldi	r25, 0x72	; 114
     42c:	c9 2e       	mov	r12, r25
     42e:	91 e0       	ldi	r25, 0x01	; 1
     430:	d9 2e       	mov	r13, r25
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     432:	c0 e2       	ldi	r28, 0x20	; 32
     434:	d0 e0       	ldi	r29, 0x00	; 0
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     436:	ce 01       	movw	r24, r28
     438:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <eeprom_read_byte>
     43c:	b8 2e       	mov	r11, r24
     43e:	ce 01       	movw	r24, r28
     440:	01 96       	adiw	r24, 0x01	; 1
     442:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <eeprom_read_byte>
     446:	9b 2d       	mov	r25, r11
     448:	f8 01       	movw	r30, r16
     44a:	81 93       	st	Z+, r24
     44c:	91 93       	st	Z+, r25
     44e:	8f 01       	movw	r16, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     450:	ce 01       	movw	r24, r28
     452:	c0 96       	adiw	r24, 0x30	; 48
     454:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <eeprom_read_byte>
     458:	b8 2e       	mov	r11, r24
     45a:	ce 01       	movw	r24, r28
     45c:	c1 96       	adiw	r24, 0x31	; 49
     45e:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <eeprom_read_byte>
     462:	9b 2d       	mov	r25, r11
     464:	f7 01       	movw	r30, r14
     466:	81 93       	st	Z+, r24
     468:	91 93       	st	Z+, r25
     46a:	7f 01       	movw	r14, r30
     46c:	22 96       	adiw	r28, 0x02	; 2
    for (i=0; i<14; i++) {
     46e:	c0 16       	cp	r12, r16
     470:	d1 06       	cpc	r13, r17
     472:	09 f7       	brne	.-62     	; 0x436 <__FUSE_REGION_LENGTH__+0x36>
    sei();
     474:	78 94       	sei
}
     476:	df 91       	pop	r29
     478:	cf 91       	pop	r28
     47a:	1f 91       	pop	r17
     47c:	0f 91       	pop	r16
     47e:	ff 90       	pop	r15
     480:	ef 90       	pop	r14
     482:	df 90       	pop	r13
     484:	cf 90       	pop	r12
     486:	bf 90       	pop	r11
     488:	08 95       	ret

0000048a <__vector_6>:
ISR(WDT_vect) {
     48a:	0f 92       	push	r0
     48c:	0f b6       	in	r0, 0x3f	; 63
     48e:	0f 92       	push	r0
     490:	1f 92       	push	r1
     492:	11 24       	eor	r1, r1
     494:	8f 93       	push	r24
     496:	0f b6       	in	r0, 0x3f	; 63
     498:	f8 94       	cli
     49a:	a8 95       	wdr
     49c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     4a0:	88 61       	ori	r24, 0x18	; 24
     4a2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     4a6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     4aa:	0f be       	out	0x3f, r0	; 63
}
     4ac:	8f 91       	pop	r24
     4ae:	1f 90       	pop	r1
     4b0:	0f 90       	pop	r0
     4b2:	0f be       	out	0x3f, r0	; 63
     4b4:	0f 90       	pop	r0
     4b6:	18 95       	reti

000004b8 <kilo_start>:
void kilo_start(void (*setup)(void), void (*loop)(void)) {
     4b8:	3c 01       	movw	r6, r24
     4ba:	eb 01       	movw	r28, r22
    uint8_t has_setup = 0;
     4bc:	10 e0       	ldi	r17, 0x00	; 0
    OCR2B = cw;
     4be:	99 24       	eor	r9, r9
     4c0:	9a 94       	dec	r9
                kilo_state = RUNNING;
     4c2:	84 e0       	ldi	r24, 0x04	; 4
     4c4:	c8 2e       	mov	r12, r24
        adc_setup_conversion(6);
     4c6:	96 e0       	ldi	r25, 0x06	; 6
     4c8:	a9 2e       	mov	r10, r25
     4ca:	23 e8       	ldi	r18, 0x83	; 131
     4cc:	b2 2e       	mov	r11, r18
		__asm__ __volatile__ (
     4ce:	38 e1       	ldi	r19, 0x18	; 24
     4d0:	d3 2e       	mov	r13, r19
     4d2:	49 e2       	ldi	r20, 0x29	; 41
     4d4:	e4 2e       	mov	r14, r20
        switch(kilo_state) {
     4d6:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <kilo_state>
     4da:	e7 30       	cpi	r30, 0x07	; 7
     4dc:	e0 f7       	brcc	.-8      	; 0x4d6 <kilo_start+0x1e>
     4de:	f0 e0       	ldi	r31, 0x00	; 0
     4e0:	eb 5f       	subi	r30, 0xFB	; 251
     4e2:	ff 4e       	sbci	r31, 0xEF	; 239
     4e4:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__tablejump2__>
                if (!has_setup) {
     4e8:	11 11       	cpse	r17, r1
     4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <kilo_start+0x38>
                    setup();
     4ec:	f3 01       	movw	r30, r6
     4ee:	09 95       	icall
                kilo_state = RUNNING;
     4f0:	c0 92 14 01 	sts	0x0114, r12	; 0x800114 <kilo_state>
     4f4:	11 e0       	ldi	r17, 0x01	; 1
                loop();
     4f6:	fe 01       	movw	r30, r28
     4f8:	09 95       	icall
                break;
     4fa:	ed cf       	rjmp	.-38     	; 0x4d6 <kilo_start+0x1e>
    if (!rx_busy) {
     4fc:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <rx_busy>
     500:	81 11       	cpse	r24, r1
     502:	e9 c0       	rjmp	.+466    	; 0x6d6 <kilo_start+0x21e>
        cli();                                    // disable interrupts
     504:	f8 94       	cli
        adc_setup_conversion(6);
     506:	a0 92 7c 00 	sts	0x007C, r10	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     50a:	b0 92 7a 00 	sts	0x007A, r11	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
        adc_start_conversion();
     50e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     512:	80 64       	ori	r24, 0x40	; 64
     514:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
        adc_finish_conversion();
     518:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     51c:	86 fd       	sbrc	r24, 6
     51e:	fc cf       	rjmp	.-8      	; 0x518 <kilo_start+0x60>
        voltage = ADCW;                           // store AD result
     520:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     524:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
        sei();                                    // reenable interrupts
     528:	78 94       	sei
                if(voltage > 682)
     52a:	8b 3a       	cpi	r24, 0xAB	; 171
     52c:	e2 e0       	ldi	r30, 0x02	; 2
     52e:	9e 07       	cpc	r25, r30
     530:	0c f0       	brlt	.+2      	; 0x534 <kilo_start+0x7c>
     532:	ce c0       	rjmp	.+412    	; 0x6d0 <kilo_start+0x218>
                else if(voltage > 648)
     534:	89 38       	cpi	r24, 0x89	; 137
     536:	f2 e0       	ldi	r31, 0x02	; 2
     538:	9f 07       	cpc	r25, r31
     53a:	0c f0       	brlt	.+2      	; 0x53e <kilo_start+0x86>
     53c:	cf c0       	rjmp	.+414    	; 0x6dc <kilo_start+0x224>
                else if(voltage > 614)
     53e:	87 36       	cpi	r24, 0x67	; 103
     540:	92 40       	sbci	r25, 0x02	; 2
     542:	0c f4       	brge	.+2      	; 0x546 <kilo_start+0x8e>
     544:	c8 c0       	rjmp	.+400    	; 0x6d6 <kilo_start+0x21e>
        DDRD |= (1<<5);
     546:	55 9a       	sbi	0x0a, 5	; 10
        DDRD |= (1<<4);
     548:	54 9a       	sbi	0x0a, 4	; 10
        DDRC |= (1<<3);
     54a:	3b 9a       	sbi	0x07, 3	; 7
        DDRC |= (1<<2);
     54c:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<5);
     54e:	3d 98       	cbi	0x07, 5	; 7
        DDRC &= ~(1<<4);
     550:	3c 98       	cbi	0x07, 4	; 7
}
     552:	c1 cf       	rjmp	.-126    	; 0x4d6 <kilo_start+0x1e>
                set_color(RGB(0,3,0));
     554:	0e 94 4d 01 	call	0x29a	; 0x29a <set_color.constprop.1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     558:	ef ec       	ldi	r30, 0xCF	; 207
     55a:	f7 e0       	ldi	r31, 0x07	; 7
     55c:	31 97       	sbiw	r30, 0x01	; 1
     55e:	f1 f7       	brne	.-4      	; 0x55c <kilo_start+0xa4>
     560:	00 c0       	rjmp	.+0      	; 0x562 <kilo_start+0xaa>
     562:	00 00       	nop
                set_color(RGB(0,0,0));
     564:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <set_color.constprop.6>
     568:	ff ef       	ldi	r31, 0xFF	; 255
     56a:	21 ee       	ldi	r18, 0xE1	; 225
     56c:	84 e0       	ldi	r24, 0x04	; 4
     56e:	f1 50       	subi	r31, 0x01	; 1
     570:	20 40       	sbci	r18, 0x00	; 0
     572:	80 40       	sbci	r24, 0x00	; 0
     574:	e1 f7       	brne	.-8      	; 0x56e <kilo_start+0xb6>
     576:	00 c0       	rjmp	.+0      	; 0x578 <kilo_start+0xc0>
     578:	00 00       	nop
	}
	else
		__ticks = (uint16_t)__tmp;
	_delay_loop_2(__ticks);
#endif
}
     57a:	ad cf       	rjmp	.-166    	; 0x4d6 <kilo_start+0x1e>
                cli();
     57c:	f8 94       	cli
                acomp_off();
     57e:	80 b7       	in	r24, 0x30	; 48
     580:	87 7f       	andi	r24, 0xF7	; 247
     582:	80 bf       	out	0x30, r24	; 48
                adc_off();
     584:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     588:	8f 77       	andi	r24, 0x7F	; 127
     58a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
                ports_off();
     58e:	14 b8       	out	0x04, r1	; 4
     590:	17 b8       	out	0x07, r1	; 7
     592:	1a b8       	out	0x0a, r1	; 10
     594:	15 b8       	out	0x05, r1	; 5
     596:	18 b8       	out	0x08, r1	; 8
     598:	1b b8       	out	0x0b, r1	; 11
     59a:	0f b6       	in	r0, 0x3f	; 63
     59c:	f8 94       	cli
     59e:	a8 95       	wdr
     5a0:	d0 92 60 00 	sts	0x0060, r13	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     5a4:	0f be       	out	0x3f, r0	; 63
     5a6:	e0 92 60 00 	sts	0x0060, r14	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
                WDTCSR |= (1<<WDIE);
     5aa:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     5ae:	80 64       	ori	r24, 0x40	; 64
     5b0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     5b4:	83 b7       	in	r24, 0x33	; 51
     5b6:	81 7f       	andi	r24, 0xF1	; 241
     5b8:	84 60       	ori	r24, 0x04	; 4
     5ba:	83 bf       	out	0x33, r24	; 51
                cli();
     5bc:	f8 94       	cli
                sleep_enable();
     5be:	83 b7       	in	r24, 0x33	; 51
     5c0:	81 60       	ori	r24, 0x01	; 1
     5c2:	83 bf       	out	0x33, r24	; 51
                sei();
     5c4:	78 94       	sei
                sleep_cpu();
     5c6:	88 95       	sleep
                sleep_disable();
     5c8:	83 b7       	in	r24, 0x33	; 51
     5ca:	8e 7f       	andi	r24, 0xFE	; 254
     5cc:	83 bf       	out	0x33, r24	; 51
                sei();
     5ce:	78 94       	sei
                rx_busy = 0;
     5d0:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <rx_busy>
                ports_on();
     5d4:	52 9a       	sbi	0x0a, 2	; 10
     5d6:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     5d8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     5dc:	80 68       	ori	r24, 0x80	; 128
     5de:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5e2:	87 e5       	ldi	r24, 0x57	; 87
     5e4:	92 e0       	ldi	r25, 0x02	; 2
     5e6:	01 97       	sbiw	r24, 0x01	; 1
     5e8:	f1 f7       	brne	.-4      	; 0x5e6 <kilo_start+0x12e>
     5ea:	00 c0       	rjmp	.+0      	; 0x5ec <kilo_start+0x134>
     5ec:	00 00       	nop
                acomp_on();
     5ee:	80 b7       	in	r24, 0x30	; 48
     5f0:	88 61       	ori	r24, 0x18	; 24
     5f2:	80 bf       	out	0x30, r24	; 48
        DDRD |= (1<<5);
     5f4:	55 9a       	sbi	0x0a, 5	; 10
        DDRD |= (1<<4);
     5f6:	54 9a       	sbi	0x0a, 4	; 10
        DDRC |= (1<<3);
     5f8:	3b 9a       	sbi	0x07, 3	; 7
        DDRC |= (1<<2);
     5fa:	3a 9a       	sbi	0x07, 2	; 7
        DDRC |= (1<<5);
     5fc:	3d 9a       	sbi	0x07, 5	; 7
        DDRC |= (1<<4);
     5fe:	3c 9a       	sbi	0x07, 4	; 7
	__builtin_avr_delay_cycles(__ticks_dc);
     600:	ef e1       	ldi	r30, 0x1F	; 31
     602:	fe e4       	ldi	r31, 0x4E	; 78
     604:	31 97       	sbiw	r30, 0x01	; 1
     606:	f1 f7       	brne	.-4      	; 0x604 <kilo_start+0x14c>
     608:	00 c0       	rjmp	.+0      	; 0x60a <kilo_start+0x152>
     60a:	00 00       	nop
                if (rx_busy) {
     60c:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <rx_busy>
     610:	81 11       	cpse	r24, r1
     612:	52 c0       	rjmp	.+164    	; 0x6b8 <kilo_start+0x200>
                    set_color(RGB(0,0,0));
     614:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <set_color.constprop.6>
     618:	5e cf       	rjmp	.-324    	; 0x4d6 <kilo_start+0x1e>
                if (cur_motion == MOVE_STOP) {
     61a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <cur_motion>
     61e:	81 11       	cpse	r24, r1
     620:	21 c0       	rjmp	.+66     	; 0x664 <kilo_start+0x1ac>
    OCR2A = ccw;
     622:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    OCR2B = cw;
     626:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
                    prev_motion = MOVE_STOP;
     62a:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <prev_motion>
     62e:	53 cf       	rjmp	.-346    	; 0x4d6 <kilo_start+0x1e>
                if (is_charging()) {
     630:	48 99       	sbic	0x09, 0	; 9
     632:	f0 cf       	rjmp	.-32     	; 0x614 <kilo_start+0x15c>
        DDRD |= (1<<5);
     634:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<4);
     636:	54 98       	cbi	0x0a, 4	; 10
        DDRC &= ~(1<<3);
     638:	3b 98       	cbi	0x07, 3	; 7
        DDRC &= ~(1<<2);
     63a:	3a 98       	cbi	0x07, 2	; 7
        DDRC &= ~(1<<5);
     63c:	3d 98       	cbi	0x07, 5	; 7
        DDRC &= ~(1<<4);
     63e:	3c 98       	cbi	0x07, 4	; 7
     640:	8f ec       	ldi	r24, 0xCF	; 207
     642:	97 e0       	ldi	r25, 0x07	; 7
     644:	01 97       	sbiw	r24, 0x01	; 1
     646:	f1 f7       	brne	.-4      	; 0x644 <kilo_start+0x18c>
     648:	00 c0       	rjmp	.+0      	; 0x64a <kilo_start+0x192>
     64a:	00 00       	nop
                    set_color(RGB(0,0,0));
     64c:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <set_color.constprop.6>
     650:	9f ef       	ldi	r25, 0xFF	; 255
     652:	e1 ee       	ldi	r30, 0xE1	; 225
     654:	f4 e0       	ldi	r31, 0x04	; 4
     656:	91 50       	subi	r25, 0x01	; 1
     658:	e0 40       	sbci	r30, 0x00	; 0
     65a:	f0 40       	sbci	r31, 0x00	; 0
     65c:	e1 f7       	brne	.-8      	; 0x656 <kilo_start+0x19e>
     65e:	00 c0       	rjmp	.+0      	; 0x660 <kilo_start+0x1a8>
     660:	00 00       	nop
}
     662:	39 cf       	rjmp	.-398    	; 0x4d6 <kilo_start+0x1e>
                    if (cur_motion != prev_motion) {
     664:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <cur_motion>
     668:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <prev_motion>
     66c:	98 17       	cp	r25, r24
     66e:	09 f4       	brne	.+2      	; 0x672 <kilo_start+0x1ba>
     670:	32 cf       	rjmp	.-412    	; 0x4d6 <kilo_start+0x1e>
                        prev_motion = cur_motion;
     672:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <cur_motion>
     676:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <prev_motion>
                        if (cur_motion == MOVE_LEFT) {
     67a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <cur_motion>
     67e:	81 30       	cpi	r24, 0x01	; 1
     680:	a1 f1       	breq	.+104    	; 0x6ea <kilo_start+0x232>
                        } else if (cur_motion == MOVE_RIGHT) {
     682:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <cur_motion>
    OCR2A = ccw;
     686:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    OCR2B = cw;
     68a:	90 92 b4 00 	sts	0x00B4, r9	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
                        } else if (cur_motion == MOVE_RIGHT) {
     68e:	82 30       	cpi	r24, 0x02	; 2
     690:	e9 f1       	breq	.+122    	; 0x70c <kilo_start+0x254>
    OCR2A = ccw;
     692:	90 92 b3 00 	sts	0x00B3, r9	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    OCR2B = cw;
     696:	90 92 b4 00 	sts	0x00B4, r9	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
	__builtin_avr_delay_cycles(__ticks_dc);
     69a:	8f e2       	ldi	r24, 0x2F	; 47
     69c:	95 e7       	ldi	r25, 0x75	; 117
     69e:	01 97       	sbiw	r24, 0x01	; 1
     6a0:	f1 f7       	brne	.-4      	; 0x69e <kilo_start+0x1e6>
     6a2:	00 c0       	rjmp	.+0      	; 0x6a4 <kilo_start+0x1ec>
     6a4:	00 00       	nop
                            set_motors(kilo_straight_left, kilo_straight_right);
     6a6:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <kilo_straight_right>
     6aa:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <kilo_straight_left>
    OCR2A = ccw;
     6ae:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    OCR2B = cw;
     6b2:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
}
     6b6:	0f cf       	rjmp	.-482    	; 0x4d6 <kilo_start+0x1e>
                    set_color(RGB(3,0,0));
     6b8:	0e 94 54 01 	call	0x2a8	; 0x2a8 <set_color.constprop.4>
     6bc:	ff ef       	ldi	r31, 0xFF	; 255
     6be:	20 e7       	ldi	r18, 0x70	; 112
     6c0:	82 e0       	ldi	r24, 0x02	; 2
     6c2:	f1 50       	subi	r31, 0x01	; 1
     6c4:	20 40       	sbci	r18, 0x00	; 0
     6c6:	80 40       	sbci	r24, 0x00	; 0
     6c8:	e1 f7       	brne	.-8      	; 0x6c2 <kilo_start+0x20a>
     6ca:	00 c0       	rjmp	.+0      	; 0x6cc <kilo_start+0x214>
     6cc:	00 00       	nop
}
     6ce:	a2 cf       	rjmp	.-188    	; 0x614 <kilo_start+0x15c>
                    set_color(RGB(0,3,0));
     6d0:	0e 94 4d 01 	call	0x29a	; 0x29a <set_color.constprop.1>
     6d4:	00 cf       	rjmp	.-512    	; 0x4d6 <kilo_start+0x1e>
                    set_color(RGB(3,0,0));
     6d6:	0e 94 54 01 	call	0x2a8	; 0x2a8 <set_color.constprop.4>
     6da:	fd ce       	rjmp	.-518    	; 0x4d6 <kilo_start+0x1e>
        DDRD &= ~(1<<5);
     6dc:	55 98       	cbi	0x0a, 5	; 10
        DDRD &= ~(1<<4);
     6de:	54 98       	cbi	0x0a, 4	; 10
        DDRC &= ~(1<<3);
     6e0:	3b 98       	cbi	0x07, 3	; 7
        DDRC &= ~(1<<2);
     6e2:	3a 98       	cbi	0x07, 2	; 7
        DDRC |= (1<<5);
     6e4:	3d 9a       	sbi	0x07, 5	; 7
        DDRC |= (1<<4);
     6e6:	3c 9a       	sbi	0x07, 4	; 7
}
     6e8:	f6 ce       	rjmp	.-532    	; 0x4d6 <kilo_start+0x1e>
    OCR2A = ccw;
     6ea:	90 92 b3 00 	sts	0x00B3, r9	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    OCR2B = cw;
     6ee:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
	__builtin_avr_delay_cycles(__ticks_dc);
     6f2:	8f e2       	ldi	r24, 0x2F	; 47
     6f4:	95 e7       	ldi	r25, 0x75	; 117
     6f6:	01 97       	sbiw	r24, 0x01	; 1
     6f8:	f1 f7       	brne	.-4      	; 0x6f6 <kilo_start+0x23e>
     6fa:	00 c0       	rjmp	.+0      	; 0x6fc <kilo_start+0x244>
     6fc:	00 00       	nop
                            set_motors(kilo_turn_left, 0);
     6fe:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <kilo_turn_left>
    OCR2A = ccw;
     702:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    OCR2B = cw;
     706:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
}
     70a:	e5 ce       	rjmp	.-566    	; 0x4d6 <kilo_start+0x1e>
     70c:	ef e2       	ldi	r30, 0x2F	; 47
     70e:	f5 e7       	ldi	r31, 0x75	; 117
     710:	31 97       	sbiw	r30, 0x01	; 1
     712:	f1 f7       	brne	.-4      	; 0x710 <kilo_start+0x258>
     714:	00 c0       	rjmp	.+0      	; 0x716 <kilo_start+0x25e>
     716:	00 00       	nop
                            set_motors(0, kilo_turn_right);
     718:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <kilo_turn_right>
    OCR2A = ccw;
     71c:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    OCR2B = cw;
     720:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
}
     724:	d8 ce       	rjmp	.-592    	; 0x4d6 <kilo_start+0x1e>

00000726 <delay>:
void delay(uint16_t ms) {
     726:	9c 01       	movw	r18, r24
    while (ms > 0) {
     728:	89 2b       	or	r24, r25
     72a:	49 f0       	breq	.+18     	; 0x73e <delay+0x18>
     72c:	8f ec       	ldi	r24, 0xCF	; 207
     72e:	97 e0       	ldi	r25, 0x07	; 7
     730:	01 97       	sbiw	r24, 0x01	; 1
     732:	f1 f7       	brne	.-4      	; 0x730 <delay+0xa>
     734:	00 c0       	rjmp	.+0      	; 0x736 <delay+0x10>
     736:	00 00       	nop
        ms--;
     738:	21 50       	subi	r18, 0x01	; 1
     73a:	31 09       	sbc	r19, r1
    while (ms > 0) {
     73c:	b9 f7       	brne	.-18     	; 0x72c <delay+0x6>
}
     73e:	08 95       	ret

00000740 <set_motors>:
    OCR2A = ccw;
     740:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    OCR2B = cw;
     744:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
}
     748:	08 95       	ret

0000074a <spinup_motors>:
    OCR2A = ccw;
     74a:	8f ef       	ldi	r24, 0xFF	; 255
     74c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    OCR2B = cw;
     750:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
     754:	8f ec       	ldi	r24, 0xCF	; 207
     756:	97 e0       	ldi	r25, 0x07	; 7
     758:	01 97       	sbiw	r24, 0x01	; 1
     75a:	f1 f7       	brne	.-4      	; 0x758 <spinup_motors+0xe>
     75c:	00 c0       	rjmp	.+0      	; 0x75e <spinup_motors+0x14>
     75e:	00 00       	nop
     760:	8f ec       	ldi	r24, 0xCF	; 207
     762:	97 e0       	ldi	r25, 0x07	; 7
     764:	01 97       	sbiw	r24, 0x01	; 1
     766:	f1 f7       	brne	.-4      	; 0x764 <spinup_motors+0x1a>
     768:	00 c0       	rjmp	.+0      	; 0x76a <spinup_motors+0x20>
     76a:	00 00       	nop
     76c:	8f ec       	ldi	r24, 0xCF	; 207
     76e:	97 e0       	ldi	r25, 0x07	; 7
     770:	01 97       	sbiw	r24, 0x01	; 1
     772:	f1 f7       	brne	.-4      	; 0x770 <spinup_motors+0x26>
     774:	00 c0       	rjmp	.+0      	; 0x776 <spinup_motors+0x2c>
     776:	00 00       	nop
     778:	8f ec       	ldi	r24, 0xCF	; 207
     77a:	97 e0       	ldi	r25, 0x07	; 7
     77c:	01 97       	sbiw	r24, 0x01	; 1
     77e:	f1 f7       	brne	.-4      	; 0x77c <spinup_motors+0x32>
     780:	00 c0       	rjmp	.+0      	; 0x782 <spinup_motors+0x38>
     782:	00 00       	nop
     784:	8f ec       	ldi	r24, 0xCF	; 207
     786:	97 e0       	ldi	r25, 0x07	; 7
     788:	01 97       	sbiw	r24, 0x01	; 1
     78a:	f1 f7       	brne	.-4      	; 0x788 <spinup_motors+0x3e>
     78c:	00 c0       	rjmp	.+0      	; 0x78e <spinup_motors+0x44>
     78e:	00 00       	nop
     790:	8f ec       	ldi	r24, 0xCF	; 207
     792:	97 e0       	ldi	r25, 0x07	; 7
     794:	01 97       	sbiw	r24, 0x01	; 1
     796:	f1 f7       	brne	.-4      	; 0x794 <spinup_motors+0x4a>
     798:	00 c0       	rjmp	.+0      	; 0x79a <spinup_motors+0x50>
     79a:	00 00       	nop
     79c:	8f ec       	ldi	r24, 0xCF	; 207
     79e:	97 e0       	ldi	r25, 0x07	; 7
     7a0:	01 97       	sbiw	r24, 0x01	; 1
     7a2:	f1 f7       	brne	.-4      	; 0x7a0 <spinup_motors+0x56>
     7a4:	00 c0       	rjmp	.+0      	; 0x7a6 <spinup_motors+0x5c>
     7a6:	00 00       	nop
     7a8:	8f ec       	ldi	r24, 0xCF	; 207
     7aa:	97 e0       	ldi	r25, 0x07	; 7
     7ac:	01 97       	sbiw	r24, 0x01	; 1
     7ae:	f1 f7       	brne	.-4      	; 0x7ac <spinup_motors+0x62>
     7b0:	00 c0       	rjmp	.+0      	; 0x7b2 <spinup_motors+0x68>
     7b2:	00 00       	nop
     7b4:	8f ec       	ldi	r24, 0xCF	; 207
     7b6:	97 e0       	ldi	r25, 0x07	; 7
     7b8:	01 97       	sbiw	r24, 0x01	; 1
     7ba:	f1 f7       	brne	.-4      	; 0x7b8 <spinup_motors+0x6e>
     7bc:	00 c0       	rjmp	.+0      	; 0x7be <spinup_motors+0x74>
     7be:	00 00       	nop
     7c0:	8f ec       	ldi	r24, 0xCF	; 207
     7c2:	97 e0       	ldi	r25, 0x07	; 7
     7c4:	01 97       	sbiw	r24, 0x01	; 1
     7c6:	f1 f7       	brne	.-4      	; 0x7c4 <spinup_motors+0x7a>
     7c8:	00 c0       	rjmp	.+0      	; 0x7ca <spinup_motors+0x80>
     7ca:	00 00       	nop
     7cc:	8f ec       	ldi	r24, 0xCF	; 207
     7ce:	97 e0       	ldi	r25, 0x07	; 7
     7d0:	01 97       	sbiw	r24, 0x01	; 1
     7d2:	f1 f7       	brne	.-4      	; 0x7d0 <spinup_motors+0x86>
     7d4:	00 c0       	rjmp	.+0      	; 0x7d6 <spinup_motors+0x8c>
     7d6:	00 00       	nop
     7d8:	8f ec       	ldi	r24, 0xCF	; 207
     7da:	97 e0       	ldi	r25, 0x07	; 7
     7dc:	01 97       	sbiw	r24, 0x01	; 1
     7de:	f1 f7       	brne	.-4      	; 0x7dc <spinup_motors+0x92>
     7e0:	00 c0       	rjmp	.+0      	; 0x7e2 <spinup_motors+0x98>
     7e2:	00 00       	nop
     7e4:	8f ec       	ldi	r24, 0xCF	; 207
     7e6:	97 e0       	ldi	r25, 0x07	; 7
     7e8:	01 97       	sbiw	r24, 0x01	; 1
     7ea:	f1 f7       	brne	.-4      	; 0x7e8 <spinup_motors+0x9e>
     7ec:	00 c0       	rjmp	.+0      	; 0x7ee <spinup_motors+0xa4>
     7ee:	00 00       	nop
     7f0:	8f ec       	ldi	r24, 0xCF	; 207
     7f2:	97 e0       	ldi	r25, 0x07	; 7
     7f4:	01 97       	sbiw	r24, 0x01	; 1
     7f6:	f1 f7       	brne	.-4      	; 0x7f4 <spinup_motors+0xaa>
     7f8:	00 c0       	rjmp	.+0      	; 0x7fa <spinup_motors+0xb0>
     7fa:	00 00       	nop
     7fc:	8f ec       	ldi	r24, 0xCF	; 207
     7fe:	97 e0       	ldi	r25, 0x07	; 7
     800:	01 97       	sbiw	r24, 0x01	; 1
     802:	f1 f7       	brne	.-4      	; 0x800 <spinup_motors+0xb6>
     804:	00 c0       	rjmp	.+0      	; 0x806 <spinup_motors+0xbc>
     806:	00 00       	nop
}
     808:	08 95       	ret

0000080a <get_ambientlight>:
    if (!rx_busy) {
     80a:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <rx_busy>
     80e:	81 11       	cpse	r24, r1
     810:	1e c0       	rjmp	.+60     	; 0x84e <get_ambientlight+0x44>
        cli();
     812:	f8 94       	cli
        adc_setup_conversion(7);
     814:	87 e0       	ldi	r24, 0x07	; 7
     816:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     81a:	83 e8       	ldi	r24, 0x83	; 131
     81c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
        adc_start_conversion();
     820:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     824:	80 64       	ori	r24, 0x40	; 64
     826:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
        adc_finish_conversion();
     82a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     82e:	86 fd       	sbrc	r24, 6
     830:	fc cf       	rjmp	.-8      	; 0x82a <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     832:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     836:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     83a:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     83e:	23 ea       	ldi	r18, 0xA3	; 163
     840:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     844:	21 e0       	ldi	r18, 0x01	; 1
     846:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
        sei();                                    // reenable interrupts
     84a:	78 94       	sei
     84c:	08 95       	ret
    int16_t light = -1;
     84e:	8f ef       	ldi	r24, 0xFF	; 255
     850:	9f ef       	ldi	r25, 0xFF	; 255
}
     852:	08 95       	ret

00000854 <get_temperature>:
    if (!rx_busy) {
     854:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <rx_busy>
     858:	81 11       	cpse	r24, r1
     85a:	1e c0       	rjmp	.+60     	; 0x898 <get_temperature+0x44>
        cli();
     85c:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     85e:	88 ec       	ldi	r24, 0xC8	; 200
     860:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     864:	87 e8       	ldi	r24, 0x87	; 135
     866:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
        adc_start_conversion();
     86a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     86e:	80 64       	ori	r24, 0x40	; 64
     870:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
        adc_finish_conversion();
     874:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     878:	86 fd       	sbrc	r24, 6
     87a:	fc cf       	rjmp	.-8      	; 0x874 <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     87c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     880:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     884:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     888:	23 ea       	ldi	r18, 0xA3	; 163
     88a:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     88e:	21 e0       	ldi	r18, 0x01	; 1
     890:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
        sei();                                    // reenable interrupts
     894:	78 94       	sei
     896:	08 95       	ret
    int16_t temp = -1;
     898:	8f ef       	ldi	r24, 0xFF	; 255
     89a:	9f ef       	ldi	r25, 0xFF	; 255
}
     89c:	08 95       	ret

0000089e <rand_hard>:
uint8_t rand_hard() {
     89e:	1f 93       	push	r17
     8a0:	cf 93       	push	r28
     8a2:	df 93       	push	r29
     8a4:	f0 e0       	ldi	r31, 0x00	; 0
     8a6:	e0 e0       	ldi	r30, 0x00	; 0
    uint8_t num = 0;
     8a8:	80 e0       	ldi	r24, 0x00	; 0
            adc_setup_conversion(6);
     8aa:	16 e0       	ldi	r17, 0x06	; 6
     8ac:	d3 e8       	ldi	r29, 0x83	; 131
            adc_trigger_high_gain();
     8ae:	c3 ea       	ldi	r28, 0xA3	; 163
     8b0:	71 e0       	ldi	r23, 0x01	; 1
            num |= (1<<i);
     8b2:	a1 e0       	ldi	r26, 0x01	; 1
     8b4:	b0 e0       	ldi	r27, 0x00	; 0
    uint8_t num = 0;
     8b6:	60 e8       	ldi	r22, 0x80	; 128
            cli();
     8b8:	f8 94       	cli
            adc_setup_conversion(6);
     8ba:	10 93 7c 00 	sts	0x007C, r17	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     8be:	d0 93 7a 00 	sts	0x007A, r29	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
            adc_start_conversion();
     8c2:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     8c6:	90 64       	ori	r25, 0x40	; 64
     8c8:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
            adc_finish_conversion();
     8cc:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     8d0:	96 fd       	sbrc	r25, 6
     8d2:	fc cf       	rjmp	.-8      	; 0x8cc <rand_hard+0x2e>
            a = ADCW&0x1;
     8d4:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     8d8:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     8dc:	21 70       	andi	r18, 0x01	; 1
            adc_start_conversion();
     8de:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     8e2:	90 64       	ori	r25, 0x40	; 64
     8e4:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
            adc_finish_conversion();
     8e8:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     8ec:	96 fd       	sbrc	r25, 6
     8ee:	fc cf       	rjmp	.-8      	; 0x8e8 <rand_hard+0x4a>
            b = ADCW&0x1;
     8f0:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     8f4:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
            adc_trigger_high_gain();
     8f8:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     8fc:	c0 93 7a 00 	sts	0x007A, r28	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     900:	70 93 7b 00 	sts	0x007B, r23	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
            sei();
     904:	78 94       	sei
            b = ADCW&0x1;
     906:	41 70       	andi	r20, 0x01	; 1
        } while (a == b && tries < 128);
     908:	24 13       	cpse	r18, r20
     90a:	02 c0       	rjmp	.+4      	; 0x910 <__stack+0x11>
     90c:	61 50       	subi	r22, 0x01	; 1
     90e:	a1 f6       	brne	.-88     	; 0x8b8 <rand_hard+0x1a>
        if (a)
     910:	22 23       	and	r18, r18
     912:	39 f0       	breq	.+14     	; 0x922 <__stack+0x23>
            num |= (1<<i);
     914:	9d 01       	movw	r18, r26
     916:	0e 2e       	mov	r0, r30
     918:	01 c0       	rjmp	.+2      	; 0x91c <__stack+0x1d>
     91a:	22 0f       	add	r18, r18
     91c:	0a 94       	dec	r0
     91e:	ea f7       	brpl	.-6      	; 0x91a <__stack+0x1b>
     920:	82 2b       	or	r24, r18
     922:	31 96       	adiw	r30, 0x01	; 1
    for (i = 0; i < 8; i++) {
     924:	e8 30       	cpi	r30, 0x08	; 8
     926:	f1 05       	cpc	r31, r1
     928:	31 f6       	brne	.-116    	; 0x8b6 <rand_hard+0x18>
}
     92a:	df 91       	pop	r29
     92c:	cf 91       	pop	r28
     92e:	1f 91       	pop	r17
     930:	08 95       	ret

00000932 <rand_soft>:
    seed ^= seed<<3;
     932:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <seed>
     936:	82 2f       	mov	r24, r18
     938:	88 0f       	add	r24, r24
     93a:	88 0f       	add	r24, r24
     93c:	88 0f       	add	r24, r24
     93e:	28 27       	eor	r18, r24
    seed ^= accumulator++>>2;
     940:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <accumulator>
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	89 0f       	add	r24, r25
     948:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <accumulator>
    seed ^= seed>>5;
     94c:	82 2f       	mov	r24, r18
     94e:	82 95       	swap	r24
     950:	86 95       	lsr	r24
     952:	87 70       	andi	r24, 0x07	; 7
     954:	82 27       	eor	r24, r18
    seed ^= accumulator++>>2;
     956:	96 95       	lsr	r25
     958:	96 95       	lsr	r25
     95a:	89 27       	eor	r24, r25
     95c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <seed>
}
     960:	08 95       	ret

00000962 <rand_seed>:
    seed = s;
     962:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <seed>
}
     966:	08 95       	ret

00000968 <get_voltage>:
    if (!rx_busy) {
     968:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <rx_busy>
     96c:	81 11       	cpse	r24, r1
     96e:	16 c0       	rjmp	.+44     	; 0x99c <get_voltage+0x34>
        cli();                                    // disable interrupts
     970:	f8 94       	cli
        adc_setup_conversion(6);
     972:	86 e0       	ldi	r24, 0x06	; 6
     974:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     978:	83 e8       	ldi	r24, 0x83	; 131
     97a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
        adc_start_conversion();
     97e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     982:	80 64       	ori	r24, 0x40	; 64
     984:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
        adc_finish_conversion();
     988:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     98c:	86 fd       	sbrc	r24, 6
     98e:	fc cf       	rjmp	.-8      	; 0x988 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     990:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     994:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
        sei();                                    // reenable interrupts
     998:	78 94       	sei
    return voltage;
     99a:	08 95       	ret
    int16_t voltage=-1;
     99c:	8f ef       	ldi	r24, 0xFF	; 255
     99e:	9f ef       	ldi	r25, 0xFF	; 255
}
     9a0:	08 95       	ret

000009a2 <estimate_distance>:
uint8_t estimate_distance(const distance_measurement_t *dist) {
     9a2:	2f 92       	push	r2
     9a4:	3f 92       	push	r3
     9a6:	4f 92       	push	r4
     9a8:	5f 92       	push	r5
     9aa:	6f 92       	push	r6
     9ac:	7f 92       	push	r7
     9ae:	8f 92       	push	r8
     9b0:	9f 92       	push	r9
     9b2:	af 92       	push	r10
     9b4:	bf 92       	push	r11
     9b6:	cf 92       	push	r12
     9b8:	df 92       	push	r13
     9ba:	ef 92       	push	r14
     9bc:	ff 92       	push	r15
     9be:	0f 93       	push	r16
     9c0:	1f 93       	push	r17
     9c2:	cf 93       	push	r28
     9c4:	df 93       	push	r29
     9c6:	cd b7       	in	r28, 0x3d	; 61
     9c8:	de b7       	in	r29, 0x3e	; 62
     9ca:	28 97       	sbiw	r28, 0x08	; 8
     9cc:	0f b6       	in	r0, 0x3f	; 63
     9ce:	f8 94       	cli
     9d0:	de bf       	out	0x3e, r29	; 62
     9d2:	0f be       	out	0x3f, r0	; 63
     9d4:	cd bf       	out	0x3d, r28	; 61
     9d6:	7c 01       	movw	r14, r24
    if (dist->high_gain < 900) {
     9d8:	dc 01       	movw	r26, r24
     9da:	12 96       	adiw	r26, 0x02	; 2
     9dc:	0d 90       	ld	r0, X+
     9de:	bc 91       	ld	r27, X
     9e0:	a0 2d       	mov	r26, r0
     9e2:	b8 87       	std	Y+8, r27	; 0x08
     9e4:	af 83       	std	Y+7, r26	; 0x07
     9e6:	a4 38       	cpi	r26, 0x84	; 132
     9e8:	e3 e0       	ldi	r30, 0x03	; 3
     9ea:	be 07       	cpc	r27, r30
     9ec:	0c f4       	brge	.+2      	; 0x9f0 <estimate_distance+0x4e>
     9ee:	77 c0       	rjmp	.+238    	; 0xade <estimate_distance+0x13c>
        if (dist->low_gain > kilo_irlow[0]) {
     9f0:	dc 01       	movw	r26, r24
     9f2:	ed 90       	ld	r14, X+
     9f4:	fc 90       	ld	r15, X
     9f6:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <kilo_irlow>
     9fa:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <kilo_irlow+0x1>
    uint8_t dist_high=255;
     9fe:	dd 24       	eor	r13, r13
     a00:	da 94       	dec	r13
        if (dist->low_gain > kilo_irlow[0]) {
     a02:	8e 15       	cp	r24, r14
     a04:	9f 05       	cpc	r25, r15
     a06:	08 f4       	brcc	.+2      	; 0xa0a <estimate_distance+0x68>
     a08:	3b c2       	rjmp	.+1142   	; 0xe80 <estimate_distance+0x4de>
                if(dist->low_gain > kilo_irlow[i]) {
     a0a:	00 91 58 01 	lds	r16, 0x0158	; 0x800158 <kilo_irlow+0x2>
     a0e:	10 91 59 01 	lds	r17, 0x0159	; 0x800159 <kilo_irlow+0x3>
     a12:	0e 15       	cp	r16, r14
     a14:	1f 05       	cpc	r17, r15
     a16:	08 f4       	brcc	.+2      	; 0xa1a <estimate_distance+0x78>
     a18:	4a c3       	rjmp	.+1684   	; 0x10ae <estimate_distance+0x70c>
     a1a:	00 91 5a 01 	lds	r16, 0x015A	; 0x80015a <kilo_irlow+0x4>
     a1e:	10 91 5b 01 	lds	r17, 0x015B	; 0x80015b <kilo_irlow+0x5>
     a22:	0e 15       	cp	r16, r14
     a24:	1f 05       	cpc	r17, r15
     a26:	08 f4       	brcc	.+2      	; 0xa2a <estimate_distance+0x88>
     a28:	47 c3       	rjmp	.+1678   	; 0x10b8 <estimate_distance+0x716>
     a2a:	00 91 5c 01 	lds	r16, 0x015C	; 0x80015c <kilo_irlow+0x6>
     a2e:	10 91 5d 01 	lds	r17, 0x015D	; 0x80015d <kilo_irlow+0x7>
     a32:	0e 15       	cp	r16, r14
     a34:	1f 05       	cpc	r17, r15
     a36:	08 f4       	brcc	.+2      	; 0xa3a <estimate_distance+0x98>
     a38:	44 c3       	rjmp	.+1672   	; 0x10c2 <estimate_distance+0x720>
     a3a:	00 91 5e 01 	lds	r16, 0x015E	; 0x80015e <kilo_irlow+0x8>
     a3e:	10 91 5f 01 	lds	r17, 0x015F	; 0x80015f <kilo_irlow+0x9>
     a42:	0e 15       	cp	r16, r14
     a44:	1f 05       	cpc	r17, r15
     a46:	08 f4       	brcc	.+2      	; 0xa4a <estimate_distance+0xa8>
     a48:	41 c3       	rjmp	.+1666   	; 0x10cc <estimate_distance+0x72a>
     a4a:	00 91 60 01 	lds	r16, 0x0160	; 0x800160 <kilo_irlow+0xa>
     a4e:	10 91 61 01 	lds	r17, 0x0161	; 0x800161 <kilo_irlow+0xb>
     a52:	0e 15       	cp	r16, r14
     a54:	1f 05       	cpc	r17, r15
     a56:	08 f4       	brcc	.+2      	; 0xa5a <estimate_distance+0xb8>
     a58:	3e c3       	rjmp	.+1660   	; 0x10d6 <estimate_distance+0x734>
     a5a:	00 91 62 01 	lds	r16, 0x0162	; 0x800162 <kilo_irlow+0xc>
     a5e:	10 91 63 01 	lds	r17, 0x0163	; 0x800163 <kilo_irlow+0xd>
     a62:	0e 15       	cp	r16, r14
     a64:	1f 05       	cpc	r17, r15
     a66:	08 f4       	brcc	.+2      	; 0xa6a <estimate_distance+0xc8>
     a68:	3f c3       	rjmp	.+1662   	; 0x10e8 <estimate_distance+0x746>
     a6a:	00 91 64 01 	lds	r16, 0x0164	; 0x800164 <kilo_irlow+0xe>
     a6e:	10 91 65 01 	lds	r17, 0x0165	; 0x800165 <kilo_irlow+0xf>
     a72:	0e 15       	cp	r16, r14
     a74:	1f 05       	cpc	r17, r15
     a76:	08 f4       	brcc	.+2      	; 0xa7a <estimate_distance+0xd8>
     a78:	40 c3       	rjmp	.+1664   	; 0x10fa <estimate_distance+0x758>
     a7a:	00 91 66 01 	lds	r16, 0x0166	; 0x800166 <kilo_irlow+0x10>
     a7e:	10 91 67 01 	lds	r17, 0x0167	; 0x800167 <kilo_irlow+0x11>
     a82:	0e 15       	cp	r16, r14
     a84:	1f 05       	cpc	r17, r15
     a86:	08 f4       	brcc	.+2      	; 0xa8a <estimate_distance+0xe8>
     a88:	41 c3       	rjmp	.+1666   	; 0x110c <estimate_distance+0x76a>
     a8a:	00 91 68 01 	lds	r16, 0x0168	; 0x800168 <kilo_irlow+0x12>
     a8e:	10 91 69 01 	lds	r17, 0x0169	; 0x800169 <kilo_irlow+0x13>
     a92:	0e 15       	cp	r16, r14
     a94:	1f 05       	cpc	r17, r15
     a96:	08 f4       	brcc	.+2      	; 0xa9a <estimate_distance+0xf8>
     a98:	46 c2       	rjmp	.+1164   	; 0xf26 <estimate_distance+0x584>
     a9a:	00 91 6a 01 	lds	r16, 0x016A	; 0x80016a <kilo_irlow+0x14>
     a9e:	10 91 6b 01 	lds	r17, 0x016B	; 0x80016b <kilo_irlow+0x15>
     aa2:	0e 15       	cp	r16, r14
     aa4:	1f 05       	cpc	r17, r15
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <estimate_distance+0x108>
     aa8:	3a c3       	rjmp	.+1652   	; 0x111e <estimate_distance+0x77c>
     aaa:	00 91 6c 01 	lds	r16, 0x016C	; 0x80016c <kilo_irlow+0x16>
     aae:	10 91 6d 01 	lds	r17, 0x016D	; 0x80016d <kilo_irlow+0x17>
     ab2:	0e 15       	cp	r16, r14
     ab4:	1f 05       	cpc	r17, r15
     ab6:	08 f4       	brcc	.+2      	; 0xaba <estimate_distance+0x118>
     ab8:	3b c3       	rjmp	.+1654   	; 0x1130 <estimate_distance+0x78e>
     aba:	00 91 6e 01 	lds	r16, 0x016E	; 0x80016e <kilo_irlow+0x18>
     abe:	10 91 6f 01 	lds	r17, 0x016F	; 0x80016f <kilo_irlow+0x19>
     ac2:	0e 15       	cp	r16, r14
     ac4:	1f 05       	cpc	r17, r15
     ac6:	08 f4       	brcc	.+2      	; 0xaca <estimate_distance+0x128>
     ac8:	3c c3       	rjmp	.+1656   	; 0x1142 <estimate_distance+0x7a0>
     aca:	00 91 70 01 	lds	r16, 0x0170	; 0x800170 <kilo_irlow+0x1a>
     ace:	10 91 71 01 	lds	r17, 0x0171	; 0x800171 <kilo_irlow+0x1b>
     ad2:	0e 15       	cp	r16, r14
     ad4:	1f 05       	cpc	r17, r15
     ad6:	08 f4       	brcc	.+2      	; 0xada <estimate_distance+0x138>
     ad8:	3d c3       	rjmp	.+1658   	; 0x1154 <estimate_distance+0x7b2>
                dist_low=90;
     ada:	1a e5       	ldi	r17, 0x5A	; 90
     adc:	20 c1       	rjmp	.+576    	; 0xd1e <estimate_distance+0x37c>
        if (dist->high_gain > kilo_irhigh[0]) {
     ade:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <kilo_irhigh>
     ae2:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <kilo_irhigh+0x1>
     ae6:	8a 17       	cp	r24, r26
     ae8:	9b 07       	cpc	r25, r27
     aea:	08 f4       	brcc	.+2      	; 0xaee <estimate_distance+0x14c>
     aec:	b1 c1       	rjmp	.+866    	; 0xe50 <estimate_distance+0x4ae>
                if (dist->high_gain > kilo_irhigh[i]) {
     aee:	00 91 31 01 	lds	r16, 0x0131	; 0x800131 <kilo_irhigh+0x2>
     af2:	10 91 32 01 	lds	r17, 0x0132	; 0x800132 <kilo_irhigh+0x3>
     af6:	0a 17       	cp	r16, r26
     af8:	1b 07       	cpc	r17, r27
     afa:	08 f4       	brcc	.+2      	; 0xafe <estimate_distance+0x15c>
     afc:	f1 c2       	rjmp	.+1506   	; 0x10e0 <estimate_distance+0x73e>
     afe:	00 91 33 01 	lds	r16, 0x0133	; 0x800133 <kilo_irhigh+0x4>
     b02:	10 91 34 01 	lds	r17, 0x0134	; 0x800134 <kilo_irhigh+0x5>
     b06:	0a 17       	cp	r16, r26
     b08:	1b 07       	cpc	r17, r27
     b0a:	08 f4       	brcc	.+2      	; 0xb0e <estimate_distance+0x16c>
     b0c:	f2 c2       	rjmp	.+1508   	; 0x10f2 <estimate_distance+0x750>
     b0e:	00 91 35 01 	lds	r16, 0x0135	; 0x800135 <kilo_irhigh+0x6>
     b12:	10 91 36 01 	lds	r17, 0x0136	; 0x800136 <kilo_irhigh+0x7>
     b16:	0a 17       	cp	r16, r26
     b18:	1b 07       	cpc	r17, r27
     b1a:	08 f4       	brcc	.+2      	; 0xb1e <estimate_distance+0x17c>
     b1c:	f3 c2       	rjmp	.+1510   	; 0x1104 <estimate_distance+0x762>
     b1e:	00 91 37 01 	lds	r16, 0x0137	; 0x800137 <kilo_irhigh+0x8>
     b22:	10 91 38 01 	lds	r17, 0x0138	; 0x800138 <kilo_irhigh+0x9>
     b26:	0a 17       	cp	r16, r26
     b28:	1b 07       	cpc	r17, r27
     b2a:	08 f4       	brcc	.+2      	; 0xb2e <estimate_distance+0x18c>
     b2c:	f8 c1       	rjmp	.+1008   	; 0xf1e <estimate_distance+0x57c>
     b2e:	00 91 39 01 	lds	r16, 0x0139	; 0x800139 <kilo_irhigh+0xa>
     b32:	10 91 3a 01 	lds	r17, 0x013A	; 0x80013a <kilo_irhigh+0xb>
     b36:	0a 17       	cp	r16, r26
     b38:	1b 07       	cpc	r17, r27
     b3a:	08 f4       	brcc	.+2      	; 0xb3e <estimate_distance+0x19c>
     b3c:	ec c2       	rjmp	.+1496   	; 0x1116 <estimate_distance+0x774>
     b3e:	00 91 3b 01 	lds	r16, 0x013B	; 0x80013b <kilo_irhigh+0xc>
     b42:	10 91 3c 01 	lds	r17, 0x013C	; 0x80013c <kilo_irhigh+0xd>
     b46:	0a 17       	cp	r16, r26
     b48:	1b 07       	cpc	r17, r27
     b4a:	08 f4       	brcc	.+2      	; 0xb4e <estimate_distance+0x1ac>
     b4c:	ed c2       	rjmp	.+1498   	; 0x1128 <estimate_distance+0x786>
     b4e:	00 91 3d 01 	lds	r16, 0x013D	; 0x80013d <kilo_irhigh+0xe>
     b52:	10 91 3e 01 	lds	r17, 0x013E	; 0x80013e <kilo_irhigh+0xf>
     b56:	0a 17       	cp	r16, r26
     b58:	1b 07       	cpc	r17, r27
     b5a:	08 f4       	brcc	.+2      	; 0xb5e <estimate_distance+0x1bc>
     b5c:	ee c2       	rjmp	.+1500   	; 0x113a <estimate_distance+0x798>
     b5e:	00 91 3f 01 	lds	r16, 0x013F	; 0x80013f <kilo_irhigh+0x10>
     b62:	10 91 40 01 	lds	r17, 0x0140	; 0x800140 <kilo_irhigh+0x11>
     b66:	0a 17       	cp	r16, r26
     b68:	1b 07       	cpc	r17, r27
     b6a:	08 f4       	brcc	.+2      	; 0xb6e <estimate_distance+0x1cc>
     b6c:	ef c2       	rjmp	.+1502   	; 0x114c <estimate_distance+0x7aa>
     b6e:	00 91 41 01 	lds	r16, 0x0141	; 0x800141 <kilo_irhigh+0x12>
     b72:	10 91 42 01 	lds	r17, 0x0142	; 0x800142 <kilo_irhigh+0x13>
     b76:	0a 17       	cp	r16, r26
     b78:	1b 07       	cpc	r17, r27
     b7a:	08 f4       	brcc	.+2      	; 0xb7e <estimate_distance+0x1dc>
     b7c:	9b c1       	rjmp	.+822    	; 0xeb4 <estimate_distance+0x512>
     b7e:	00 91 43 01 	lds	r16, 0x0143	; 0x800143 <kilo_irhigh+0x14>
     b82:	10 91 44 01 	lds	r17, 0x0144	; 0x800144 <kilo_irhigh+0x15>
     b86:	0a 17       	cp	r16, r26
     b88:	1b 07       	cpc	r17, r27
     b8a:	08 f4       	brcc	.+2      	; 0xb8e <estimate_distance+0x1ec>
     b8c:	e8 c2       	rjmp	.+1488   	; 0x115e <estimate_distance+0x7bc>
     b8e:	00 91 45 01 	lds	r16, 0x0145	; 0x800145 <kilo_irhigh+0x16>
     b92:	10 91 46 01 	lds	r17, 0x0146	; 0x800146 <kilo_irhigh+0x17>
     b96:	0a 17       	cp	r16, r26
     b98:	1b 07       	cpc	r17, r27
     b9a:	08 f4       	brcc	.+2      	; 0xb9e <estimate_distance+0x1fc>
     b9c:	e4 c2       	rjmp	.+1480   	; 0x1166 <estimate_distance+0x7c4>
     b9e:	00 91 47 01 	lds	r16, 0x0147	; 0x800147 <kilo_irhigh+0x18>
     ba2:	10 91 48 01 	lds	r17, 0x0148	; 0x800148 <kilo_irhigh+0x19>
     ba6:	0a 17       	cp	r16, r26
     ba8:	1b 07       	cpc	r17, r27
     baa:	08 f4       	brcc	.+2      	; 0xbae <estimate_distance+0x20c>
     bac:	e0 c2       	rjmp	.+1472   	; 0x116e <estimate_distance+0x7cc>
     bae:	00 91 49 01 	lds	r16, 0x0149	; 0x800149 <kilo_irhigh+0x1a>
     bb2:	10 91 4a 01 	lds	r17, 0x014A	; 0x80014a <kilo_irhigh+0x1b>
            for (i=1; i<14; i++) {
     bb6:	8d e0       	ldi	r24, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
     bb8:	2d e0       	ldi	r18, 0x0D	; 13
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	0a 17       	cp	r16, r26
     bbe:	1b 07       	cpc	r17, r27
     bc0:	08 f4       	brcc	.+2      	; 0xbc4 <estimate_distance+0x222>
     bc2:	7b c1       	rjmp	.+758    	; 0xeba <estimate_distance+0x518>
     bc4:	41 2c       	mov	r4, r1
     bc6:	51 2c       	mov	r5, r1
     bc8:	30 ed       	ldi	r19, 0xD0	; 208
     bca:	3d 83       	std	Y+5, r19	; 0x05
     bcc:	40 e4       	ldi	r20, 0x40	; 64
     bce:	4e 83       	std	Y+6, r20	; 0x06
     bd0:	2c e0       	ldi	r18, 0x0C	; 12
     bd2:	c2 2e       	mov	r12, r18
     bd4:	d1 2c       	mov	r13, r1
            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     bd6:	f6 01       	movw	r30, r12
     bd8:	ee 0f       	add	r30, r30
     bda:	ff 1f       	adc	r31, r31
     bdc:	e1 5d       	subi	r30, 0xD1	; 209
     bde:	fe 4f       	sbci	r31, 0xFE	; 254
     be0:	80 81       	ld	r24, Z
     be2:	91 81       	ldd	r25, Z+1	; 0x01
     be4:	d8 01       	movw	r26, r16
     be6:	a8 1b       	sub	r26, r24
     be8:	b9 0b       	sbc	r27, r25
     bea:	9d 01       	movw	r18, r26
     bec:	50 e0       	ldi	r21, 0x00	; 0
     bee:	40 e0       	ldi	r20, 0x00	; 0
     bf0:	29 83       	std	Y+1, r18	; 0x01
     bf2:	3a 83       	std	Y+2, r19	; 0x02
     bf4:	4b 83       	std	Y+3, r20	; 0x03
     bf6:	5c 83       	std	Y+4, r21	; 0x04
     bf8:	ca 01       	movw	r24, r20
     bfa:	bd 01       	movw	r22, r26
     bfc:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__floatunsisf>
     c00:	9b 01       	movw	r18, r22
     c02:	ac 01       	movw	r20, r24
     c04:	69 83       	std	Y+1, r22	; 0x01
     c06:	7a 83       	std	Y+2, r23	; 0x02
     c08:	8b 83       	std	Y+3, r24	; 0x03
     c0a:	9c 83       	std	Y+4, r25	; 0x04
     c0c:	69 81       	ldd	r22, Y+1	; 0x01
     c0e:	7a 81       	ldd	r23, Y+2	; 0x02
     c10:	8b 81       	ldd	r24, Y+3	; 0x03
     c12:	9c 81       	ldd	r25, Y+4	; 0x04
     c14:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__addsf3>
     c18:	5b 01       	movw	r10, r22
     c1a:	6c 01       	movw	r12, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     c1c:	8f 81       	ldd	r24, Y+7	; 0x07
     c1e:	98 85       	ldd	r25, Y+8	; 0x08
     c20:	09 2e       	mov	r0, r25
     c22:	00 0c       	add	r0, r0
     c24:	aa 0b       	sbc	r26, r26
     c26:	bb 0b       	sbc	r27, r27
     c28:	89 83       	std	Y+1, r24	; 0x01
     c2a:	9a 83       	std	Y+2, r25	; 0x02
     c2c:	ab 83       	std	Y+3, r26	; 0x03
     c2e:	bc 83       	std	Y+4, r27	; 0x04
     c30:	bc 01       	movw	r22, r24
     c32:	cd 01       	movw	r24, r26
     c34:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <__floatsisf>
     c38:	3b 01       	movw	r6, r22
     c3a:	4c 01       	movw	r8, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
     c3c:	98 01       	movw	r18, r16
     c3e:	50 e0       	ldi	r21, 0x00	; 0
     c40:	40 e0       	ldi	r20, 0x00	; 0
     c42:	29 83       	std	Y+1, r18	; 0x01
     c44:	3a 83       	std	Y+2, r19	; 0x02
     c46:	4b 83       	std	Y+3, r20	; 0x03
     c48:	5c 83       	std	Y+4, r21	; 0x04
     c4a:	ca 01       	movw	r24, r20
     c4c:	b8 01       	movw	r22, r16
     c4e:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__floatunsisf>
     c52:	1b 01       	movw	r2, r22
     c54:	8c 01       	movw	r16, r24
     c56:	92 01       	movw	r18, r4
     c58:	4d 81       	ldd	r20, Y+5	; 0x05
     c5a:	5e 81       	ldd	r21, Y+6	; 0x06
     c5c:	a9 82       	std	Y+1, r10	; 0x01
     c5e:	ba 82       	std	Y+2, r11	; 0x02
     c60:	cb 82       	std	Y+3, r12	; 0x03
     c62:	dc 82       	std	Y+4, r13	; 0x04
     c64:	69 81       	ldd	r22, Y+1	; 0x01
     c66:	7a 81       	ldd	r23, Y+2	; 0x02
     c68:	8b 81       	ldd	r24, Y+3	; 0x03
     c6a:	9c 81       	ldd	r25, Y+4	; 0x04
     c6c:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <__mulsf3>
     c70:	9b 01       	movw	r18, r22
     c72:	ac 01       	movw	r20, r24
     c74:	29 82       	std	Y+1, r2	; 0x01
     c76:	3a 82       	std	Y+2, r3	; 0x02
     c78:	0b 83       	std	Y+3, r16	; 0x03
     c7a:	1c 83       	std	Y+4, r17	; 0x04
     c7c:	69 81       	ldd	r22, Y+1	; 0x01
     c7e:	7a 81       	ldd	r23, Y+2	; 0x02
     c80:	8b 81       	ldd	r24, Y+3	; 0x03
     c82:	9c 81       	ldd	r25, Y+4	; 0x04
     c84:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <__subsf3>
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     c88:	9b 01       	movw	r18, r22
     c8a:	ac 01       	movw	r20, r24
     c8c:	69 82       	std	Y+1, r6	; 0x01
     c8e:	7a 82       	std	Y+2, r7	; 0x02
     c90:	8b 82       	std	Y+3, r8	; 0x03
     c92:	9c 82       	std	Y+4, r9	; 0x04
     c94:	69 81       	ldd	r22, Y+1	; 0x01
     c96:	7a 81       	ldd	r23, Y+2	; 0x02
     c98:	8b 81       	ldd	r24, Y+3	; 0x03
     c9a:	9c 81       	ldd	r25, Y+4	; 0x04
     c9c:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <__subsf3>
     ca0:	20 e0       	ldi	r18, 0x00	; 0
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	40 e2       	ldi	r20, 0x20	; 32
     ca6:	51 e4       	ldi	r21, 0x41	; 65
     ca8:	69 83       	std	Y+1, r22	; 0x01
     caa:	7a 83       	std	Y+2, r23	; 0x02
     cac:	8b 83       	std	Y+3, r24	; 0x03
     cae:	9c 83       	std	Y+4, r25	; 0x04
     cb0:	69 81       	ldd	r22, Y+1	; 0x01
     cb2:	7a 81       	ldd	r23, Y+2	; 0x02
     cb4:	8b 81       	ldd	r24, Y+3	; 0x03
     cb6:	9c 81       	ldd	r25, Y+4	; 0x04
     cb8:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <__mulsf3>
            b=((int)((int)b/(int)slope));
     cbc:	69 83       	std	Y+1, r22	; 0x01
     cbe:	7a 83       	std	Y+2, r23	; 0x02
     cc0:	8b 83       	std	Y+3, r24	; 0x03
     cc2:	9c 83       	std	Y+4, r25	; 0x04
     cc4:	69 81       	ldd	r22, Y+1	; 0x01
     cc6:	7a 81       	ldd	r23, Y+2	; 0x02
     cc8:	8b 81       	ldd	r24, Y+3	; 0x03
     cca:	9c 81       	ldd	r25, Y+4	; 0x04
     ccc:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <__fixsfsi>
     cd0:	8b 01       	movw	r16, r22
     cd2:	a9 82       	std	Y+1, r10	; 0x01
     cd4:	ba 82       	std	Y+2, r11	; 0x02
     cd6:	cb 82       	std	Y+3, r12	; 0x03
     cd8:	dc 82       	std	Y+4, r13	; 0x04
     cda:	69 81       	ldd	r22, Y+1	; 0x01
     cdc:	7a 81       	ldd	r23, Y+2	; 0x02
     cde:	8b 81       	ldd	r24, Y+3	; 0x03
     ce0:	9c 81       	ldd	r25, Y+4	; 0x04
     ce2:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <__fixsfsi>
     ce6:	69 83       	std	Y+1, r22	; 0x01
     ce8:	7a 83       	std	Y+2, r23	; 0x02
     cea:	8b 83       	std	Y+3, r24	; 0x03
     cec:	9c 83       	std	Y+4, r25	; 0x04
     cee:	c8 01       	movw	r24, r16
     cf0:	69 81       	ldd	r22, Y+1	; 0x01
     cf2:	7a 81       	ldd	r23, Y+2	; 0x02
     cf4:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <__divmodhi4>
            dist_high=b;
     cf8:	d6 2e       	mov	r13, r22
    if (dist->high_gain > 700) {
     cfa:	4f 81       	ldd	r20, Y+7	; 0x07
     cfc:	58 85       	ldd	r21, Y+8	; 0x08
     cfe:	4d 3b       	cpi	r20, 0xBD	; 189
     d00:	52 40       	sbci	r21, 0x02	; 2
     d02:	0c f4       	brge	.+2      	; 0xd06 <estimate_distance+0x364>
     d04:	09 c1       	rjmp	.+530    	; 0xf18 <estimate_distance+0x576>
        if (dist->low_gain > kilo_irlow[0]) {
     d06:	d7 01       	movw	r26, r14
     d08:	ed 90       	ld	r14, X+
     d0a:	fc 90       	ld	r15, X
     d0c:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <kilo_irlow>
     d10:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <kilo_irlow+0x1>
     d14:	8e 15       	cp	r24, r14
     d16:	9f 05       	cpc	r25, r15
     d18:	08 f0       	brcs	.+2      	; 0xd1c <estimate_distance+0x37a>
     d1a:	77 ce       	rjmp	.-786    	; 0xa0a <estimate_distance+0x68>
            dist_low=0;
     d1c:	10 e0       	ldi	r17, 0x00	; 0
        if (dist_high != 255) {
     d1e:	bf ef       	ldi	r27, 0xFF	; 255
     d20:	81 e2       	ldi	r24, 0x21	; 33
     d22:	81 0f       	add	r24, r17
     d24:	db 16       	cp	r13, r27
     d26:	09 f4       	brne	.+2      	; 0xd2a <estimate_distance+0x388>
     d28:	ac c0       	rjmp	.+344    	; 0xe82 <estimate_distance+0x4e0>
     d2a:	2d 2d       	mov	r18, r13
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	50 e0       	ldi	r21, 0x00	; 0
     d30:	40 e0       	ldi	r20, 0x00	; 0
     d32:	29 83       	std	Y+1, r18	; 0x01
     d34:	3a 83       	std	Y+2, r19	; 0x02
     d36:	4b 83       	std	Y+3, r20	; 0x03
     d38:	5c 83       	std	Y+4, r21	; 0x04
     d3a:	ca 01       	movw	r24, r20
     d3c:	b9 01       	movw	r22, r18
     d3e:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__floatunsisf>
     d42:	6b 01       	movw	r12, r22
     d44:	7c 01       	movw	r14, r24
     d46:	81 2f       	mov	r24, r17
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	a0 e0       	ldi	r26, 0x00	; 0
     d4e:	89 83       	std	Y+1, r24	; 0x01
     d50:	9a 83       	std	Y+2, r25	; 0x02
     d52:	ab 83       	std	Y+3, r26	; 0x03
     d54:	bc 83       	std	Y+4, r27	; 0x04
     d56:	bc 01       	movw	r22, r24
     d58:	cd 01       	movw	r24, r26
     d5a:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__floatunsisf>
     d5e:	4b 01       	movw	r8, r22
     d60:	5c 01       	movw	r10, r24
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     d62:	2f 81       	ldd	r18, Y+7	; 0x07
     d64:	38 85       	ldd	r19, Y+8	; 0x08
     d66:	03 2e       	mov	r0, r19
     d68:	00 0c       	add	r0, r0
     d6a:	44 0b       	sbc	r20, r20
     d6c:	55 0b       	sbc	r21, r21
     d6e:	29 83       	std	Y+1, r18	; 0x01
     d70:	3a 83       	std	Y+2, r19	; 0x02
     d72:	4b 83       	std	Y+3, r20	; 0x03
     d74:	5c 83       	std	Y+4, r21	; 0x04
     d76:	ca 01       	movw	r24, r20
     d78:	b9 01       	movw	r22, r18
     d7a:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <__floatsisf>
     d7e:	8b 01       	movw	r16, r22
     d80:	8e 83       	std	Y+6, r24	; 0x06
     d82:	9d 83       	std	Y+5, r25	; 0x05
     d84:	9b 01       	movw	r18, r22
     d86:	ac 01       	movw	r20, r24
     d88:	60 e0       	ldi	r22, 0x00	; 0
     d8a:	70 e0       	ldi	r23, 0x00	; 0
     d8c:	81 e6       	ldi	r24, 0x61	; 97
     d8e:	94 e4       	ldi	r25, 0x44	; 68
     d90:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <__subsf3>
     d94:	96 01       	movw	r18, r12
     d96:	a7 01       	movw	r20, r14
     d98:	69 83       	std	Y+1, r22	; 0x01
     d9a:	7a 83       	std	Y+2, r23	; 0x02
     d9c:	8b 83       	std	Y+3, r24	; 0x03
     d9e:	9c 83       	std	Y+4, r25	; 0x04
     da0:	69 81       	ldd	r22, Y+1	; 0x01
     da2:	7a 81       	ldd	r23, Y+2	; 0x02
     da4:	8b 81       	ldd	r24, Y+3	; 0x03
     da6:	9c 81       	ldd	r25, Y+4	; 0x04
     da8:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <__mulsf3>
     dac:	6b 01       	movw	r12, r22
     dae:	7c 01       	movw	r14, r24
     db0:	20 e0       	ldi	r18, 0x00	; 0
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	4f e2       	ldi	r20, 0x2F	; 47
     db6:	54 e4       	ldi	r21, 0x44	; 68
     db8:	09 83       	std	Y+1, r16	; 0x01
     dba:	1a 83       	std	Y+2, r17	; 0x02
     dbc:	8e 81       	ldd	r24, Y+6	; 0x06
     dbe:	8b 83       	std	Y+3, r24	; 0x03
     dc0:	9d 81       	ldd	r25, Y+5	; 0x05
     dc2:	9c 83       	std	Y+4, r25	; 0x04
     dc4:	69 81       	ldd	r22, Y+1	; 0x01
     dc6:	7a 81       	ldd	r23, Y+2	; 0x02
     dc8:	8b 81       	ldd	r24, Y+3	; 0x03
     dca:	9c 81       	ldd	r25, Y+4	; 0x04
     dcc:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <__subsf3>
     dd0:	94 01       	movw	r18, r8
     dd2:	a5 01       	movw	r20, r10
     dd4:	69 83       	std	Y+1, r22	; 0x01
     dd6:	7a 83       	std	Y+2, r23	; 0x02
     dd8:	8b 83       	std	Y+3, r24	; 0x03
     dda:	9c 83       	std	Y+4, r25	; 0x04
     ddc:	69 81       	ldd	r22, Y+1	; 0x01
     dde:	7a 81       	ldd	r23, Y+2	; 0x02
     de0:	8b 81       	ldd	r24, Y+3	; 0x03
     de2:	9c 81       	ldd	r25, Y+4	; 0x04
     de4:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <__mulsf3>
     de8:	9b 01       	movw	r18, r22
     dea:	ac 01       	movw	r20, r24
     dec:	c9 82       	std	Y+1, r12	; 0x01
     dee:	da 82       	std	Y+2, r13	; 0x02
     df0:	eb 82       	std	Y+3, r14	; 0x03
     df2:	fc 82       	std	Y+4, r15	; 0x04
     df4:	69 81       	ldd	r22, Y+1	; 0x01
     df6:	7a 81       	ldd	r23, Y+2	; 0x02
     df8:	8b 81       	ldd	r24, Y+3	; 0x03
     dfa:	9c 81       	ldd	r25, Y+4	; 0x04
     dfc:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__addsf3>
     e00:	20 e0       	ldi	r18, 0x00	; 0
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	48 e4       	ldi	r20, 0x48	; 72
     e06:	53 e4       	ldi	r21, 0x43	; 67
     e08:	69 83       	std	Y+1, r22	; 0x01
     e0a:	7a 83       	std	Y+2, r23	; 0x02
     e0c:	8b 83       	std	Y+3, r24	; 0x03
     e0e:	9c 83       	std	Y+4, r25	; 0x04
     e10:	69 81       	ldd	r22, Y+1	; 0x01
     e12:	7a 81       	ldd	r23, Y+2	; 0x02
     e14:	8b 81       	ldd	r24, Y+3	; 0x03
     e16:	9c 81       	ldd	r25, Y+4	; 0x04
     e18:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <__divsf3>
     e1c:	20 e0       	ldi	r18, 0x00	; 0
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	44 e0       	ldi	r20, 0x04	; 4
     e22:	52 e4       	ldi	r21, 0x42	; 66
     e24:	69 83       	std	Y+1, r22	; 0x01
     e26:	7a 83       	std	Y+2, r23	; 0x02
     e28:	8b 83       	std	Y+3, r24	; 0x03
     e2a:	9c 83       	std	Y+4, r25	; 0x04
     e2c:	69 81       	ldd	r22, Y+1	; 0x01
     e2e:	7a 81       	ldd	r23, Y+2	; 0x02
     e30:	8b 81       	ldd	r24, Y+3	; 0x03
     e32:	9c 81       	ldd	r25, Y+4	; 0x04
     e34:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__addsf3>
     e38:	69 83       	std	Y+1, r22	; 0x01
     e3a:	7a 83       	std	Y+2, r23	; 0x02
     e3c:	8b 83       	std	Y+3, r24	; 0x03
     e3e:	9c 83       	std	Y+4, r25	; 0x04
     e40:	69 81       	ldd	r22, Y+1	; 0x01
     e42:	7a 81       	ldd	r23, Y+2	; 0x02
     e44:	8b 81       	ldd	r24, Y+3	; 0x03
     e46:	9c 81       	ldd	r25, Y+4	; 0x04
     e48:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <__fixunssfsi>
     e4c:	86 2f       	mov	r24, r22
     e4e:	19 c0       	rjmp	.+50     	; 0xe82 <estimate_distance+0x4e0>
    if (dist->high_gain > 700) {
     e50:	ad 3b       	cpi	r26, 0xBD	; 189
     e52:	b2 40       	sbci	r27, 0x02	; 2
     e54:	ac f0       	brlt	.+42     	; 0xe80 <estimate_distance+0x4de>
        if (dist->low_gain > kilo_irlow[0]) {
     e56:	d7 01       	movw	r26, r14
     e58:	ed 90       	ld	r14, X+
     e5a:	fc 90       	ld	r15, X
     e5c:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <kilo_irlow>
     e60:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <kilo_irlow+0x1>
            dist_high=0;
     e64:	d1 2c       	mov	r13, r1
        if (dist->low_gain > kilo_irlow[0]) {
     e66:	8e 15       	cp	r24, r14
     e68:	9f 05       	cpc	r25, r15
     e6a:	08 f0       	brcs	.+2      	; 0xe6e <estimate_distance+0x4cc>
     e6c:	ce cd       	rjmp	.-1124   	; 0xa0a <estimate_distance+0x68>
     e6e:	81 2c       	mov	r8, r1
     e70:	91 2c       	mov	r9, r1
     e72:	a1 2c       	mov	r10, r1
     e74:	b1 2c       	mov	r11, r1
     e76:	c1 2c       	mov	r12, r1
     e78:	d1 2c       	mov	r13, r1
     e7a:	e1 2c       	mov	r14, r1
     e7c:	f1 2c       	mov	r15, r1
     e7e:	71 cf       	rjmp	.-286    	; 0xd62 <estimate_distance+0x3c0>
    if (dist->high_gain > 700) {
     e80:	81 e2       	ldi	r24, 0x21	; 33
}
     e82:	28 96       	adiw	r28, 0x08	; 8
     e84:	0f b6       	in	r0, 0x3f	; 63
     e86:	f8 94       	cli
     e88:	de bf       	out	0x3e, r29	; 62
     e8a:	0f be       	out	0x3f, r0	; 63
     e8c:	cd bf       	out	0x3d, r28	; 61
     e8e:	df 91       	pop	r29
     e90:	cf 91       	pop	r28
     e92:	1f 91       	pop	r17
     e94:	0f 91       	pop	r16
     e96:	ff 90       	pop	r15
     e98:	ef 90       	pop	r14
     e9a:	df 90       	pop	r13
     e9c:	cf 90       	pop	r12
     e9e:	bf 90       	pop	r11
     ea0:	af 90       	pop	r10
     ea2:	9f 90       	pop	r9
     ea4:	8f 90       	pop	r8
     ea6:	7f 90       	pop	r7
     ea8:	6f 90       	pop	r6
     eaa:	5f 90       	pop	r5
     eac:	4f 90       	pop	r4
     eae:	3f 90       	pop	r3
     eb0:	2f 90       	pop	r2
     eb2:	08 95       	ret
            for (i=1; i<14; i++) {
     eb4:	89 e0       	ldi	r24, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
     eb6:	29 e0       	ldi	r18, 0x09	; 9
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	69 01       	movw	r12, r18
     ebc:	f1 e0       	ldi	r31, 0x01	; 1
     ebe:	cf 1a       	sub	r12, r31
     ec0:	d1 08       	sbc	r13, r1
     ec2:	28 2f       	mov	r18, r24
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	50 e0       	ldi	r21, 0x00	; 0
     ec8:	40 e0       	ldi	r20, 0x00	; 0
     eca:	29 83       	std	Y+1, r18	; 0x01
     ecc:	3a 83       	std	Y+2, r19	; 0x02
     ece:	4b 83       	std	Y+3, r20	; 0x03
     ed0:	5c 83       	std	Y+4, r21	; 0x04
     ed2:	ca 01       	movw	r24, r20
     ed4:	b9 01       	movw	r22, r18
     ed6:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__floatunsisf>
     eda:	20 e0       	ldi	r18, 0x00	; 0
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	40 e0       	ldi	r20, 0x00	; 0
     ee0:	5f e3       	ldi	r21, 0x3F	; 63
     ee2:	69 83       	std	Y+1, r22	; 0x01
     ee4:	7a 83       	std	Y+2, r23	; 0x02
     ee6:	8b 83       	std	Y+3, r24	; 0x03
     ee8:	9c 83       	std	Y+4, r25	; 0x04
     eea:	69 81       	ldd	r22, Y+1	; 0x01
     eec:	7a 81       	ldd	r23, Y+2	; 0x02
     eee:	8b 81       	ldd	r24, Y+3	; 0x03
     ef0:	9c 81       	ldd	r25, Y+4	; 0x04
     ef2:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <__mulsf3>
     ef6:	20 e0       	ldi	r18, 0x00	; 0
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	a9 01       	movw	r20, r18
     efc:	69 83       	std	Y+1, r22	; 0x01
     efe:	7a 83       	std	Y+2, r23	; 0x02
     f00:	8b 83       	std	Y+3, r24	; 0x03
     f02:	9c 83       	std	Y+4, r25	; 0x04
     f04:	69 81       	ldd	r22, Y+1	; 0x01
     f06:	7a 81       	ldd	r23, Y+2	; 0x02
     f08:	8b 81       	ldd	r24, Y+3	; 0x03
     f0a:	9c 81       	ldd	r25, Y+4	; 0x04
     f0c:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__addsf3>
     f10:	2b 01       	movw	r4, r22
     f12:	8d 83       	std	Y+5, r24	; 0x05
     f14:	9e 83       	std	Y+6, r25	; 0x06
     f16:	5f ce       	rjmp	.-834    	; 0xbd6 <estimate_distance+0x234>
     f18:	81 e2       	ldi	r24, 0x21	; 33
     f1a:	86 0f       	add	r24, r22
     f1c:	b2 cf       	rjmp	.-156    	; 0xe82 <estimate_distance+0x4e0>
            for (i=1; i<14; i++) {
     f1e:	84 e0       	ldi	r24, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
     f20:	24 e0       	ldi	r18, 0x04	; 4
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	ca cf       	rjmp	.-108    	; 0xeba <estimate_distance+0x518>
            for(i=1; i<14; i++) {
     f26:	59 e0       	ldi	r21, 0x09	; 9
     f28:	65 2e       	mov	r6, r21
                if(dist->low_gain > kilo_irlow[i]) {
     f2a:	e9 e0       	ldi	r30, 0x09	; 9
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     f2e:	ee 0f       	add	r30, r30
     f30:	ff 1f       	adc	r31, r31
     f32:	ec 5a       	subi	r30, 0xAC	; 172
     f34:	fe 4f       	sbci	r31, 0xFE	; 254
     f36:	80 81       	ld	r24, Z
     f38:	91 81       	ldd	r25, Z+1	; 0x01
     f3a:	d8 01       	movw	r26, r16
     f3c:	a8 1b       	sub	r26, r24
     f3e:	b9 0b       	sbc	r27, r25
     f40:	9d 01       	movw	r18, r26
     f42:	50 e0       	ldi	r21, 0x00	; 0
     f44:	40 e0       	ldi	r20, 0x00	; 0
     f46:	29 83       	std	Y+1, r18	; 0x01
     f48:	3a 83       	std	Y+2, r19	; 0x02
     f4a:	4b 83       	std	Y+3, r20	; 0x03
     f4c:	5c 83       	std	Y+4, r21	; 0x04
     f4e:	ca 01       	movw	r24, r20
     f50:	bd 01       	movw	r22, r26
     f52:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__floatunsisf>
     f56:	9b 01       	movw	r18, r22
     f58:	ac 01       	movw	r20, r24
     f5a:	69 83       	std	Y+1, r22	; 0x01
     f5c:	7a 83       	std	Y+2, r23	; 0x02
     f5e:	8b 83       	std	Y+3, r24	; 0x03
     f60:	9c 83       	std	Y+4, r25	; 0x04
     f62:	69 81       	ldd	r22, Y+1	; 0x01
     f64:	7a 81       	ldd	r23, Y+2	; 0x02
     f66:	8b 81       	ldd	r24, Y+3	; 0x03
     f68:	9c 81       	ldd	r25, Y+4	; 0x04
     f6a:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__addsf3>
     f6e:	96 2e       	mov	r9, r22
     f70:	a7 2e       	mov	r10, r23
     f72:	b8 2e       	mov	r11, r24
     f74:	c9 2e       	mov	r12, r25
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     f76:	c7 01       	movw	r24, r14
     f78:	ff 0c       	add	r15, r15
     f7a:	aa 0b       	sbc	r26, r26
     f7c:	bb 0b       	sbc	r27, r27
     f7e:	89 83       	std	Y+1, r24	; 0x01
     f80:	9a 83       	std	Y+2, r25	; 0x02
     f82:	ab 83       	std	Y+3, r26	; 0x03
     f84:	bc 83       	std	Y+4, r27	; 0x04
     f86:	bc 01       	movw	r22, r24
     f88:	cd 01       	movw	r24, r26
     f8a:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <__floatsisf>
     f8e:	76 2e       	mov	r7, r22
     f90:	87 2e       	mov	r8, r23
     f92:	7c 01       	movw	r14, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
     f94:	98 01       	movw	r18, r16
     f96:	50 e0       	ldi	r21, 0x00	; 0
     f98:	40 e0       	ldi	r20, 0x00	; 0
     f9a:	29 83       	std	Y+1, r18	; 0x01
     f9c:	3a 83       	std	Y+2, r19	; 0x02
     f9e:	4b 83       	std	Y+3, r20	; 0x03
     fa0:	5c 83       	std	Y+4, r21	; 0x04
     fa2:	ca 01       	movw	r24, r20
     fa4:	b8 01       	movw	r22, r16
     fa6:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__floatunsisf>
     faa:	2b 01       	movw	r4, r22
     fac:	8c 01       	movw	r16, r24
     fae:	86 2d       	mov	r24, r6
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	a0 e0       	ldi	r26, 0x00	; 0
     fb6:	89 83       	std	Y+1, r24	; 0x01
     fb8:	9a 83       	std	Y+2, r25	; 0x02
     fba:	ab 83       	std	Y+3, r26	; 0x03
     fbc:	bc 83       	std	Y+4, r27	; 0x04
     fbe:	bc 01       	movw	r22, r24
     fc0:	cd 01       	movw	r24, r26
     fc2:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__floatunsisf>
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	40 e0       	ldi	r20, 0x00	; 0
     fcc:	5f e3       	ldi	r21, 0x3F	; 63
     fce:	69 83       	std	Y+1, r22	; 0x01
     fd0:	7a 83       	std	Y+2, r23	; 0x02
     fd2:	8b 83       	std	Y+3, r24	; 0x03
     fd4:	9c 83       	std	Y+4, r25	; 0x04
     fd6:	69 81       	ldd	r22, Y+1	; 0x01
     fd8:	7a 81       	ldd	r23, Y+2	; 0x02
     fda:	8b 81       	ldd	r24, Y+3	; 0x03
     fdc:	9c 81       	ldd	r25, Y+4	; 0x04
     fde:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <__mulsf3>
     fe2:	20 e0       	ldi	r18, 0x00	; 0
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	a9 01       	movw	r20, r18
     fe8:	69 83       	std	Y+1, r22	; 0x01
     fea:	7a 83       	std	Y+2, r23	; 0x02
     fec:	8b 83       	std	Y+3, r24	; 0x03
     fee:	9c 83       	std	Y+4, r25	; 0x04
     ff0:	69 81       	ldd	r22, Y+1	; 0x01
     ff2:	7a 81       	ldd	r23, Y+2	; 0x02
     ff4:	8b 81       	ldd	r24, Y+3	; 0x03
     ff6:	9c 81       	ldd	r25, Y+4	; 0x04
     ff8:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__addsf3>
     ffc:	29 2d       	mov	r18, r9
     ffe:	3a 2d       	mov	r19, r10
    1000:	4b 2d       	mov	r20, r11
    1002:	5c 2d       	mov	r21, r12
    1004:	69 83       	std	Y+1, r22	; 0x01
    1006:	7a 83       	std	Y+2, r23	; 0x02
    1008:	8b 83       	std	Y+3, r24	; 0x03
    100a:	9c 83       	std	Y+4, r25	; 0x04
    100c:	69 81       	ldd	r22, Y+1	; 0x01
    100e:	7a 81       	ldd	r23, Y+2	; 0x02
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	9c 81       	ldd	r25, Y+4	; 0x04
    1014:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <__mulsf3>
    1018:	9b 01       	movw	r18, r22
    101a:	ac 01       	movw	r20, r24
    101c:	49 82       	std	Y+1, r4	; 0x01
    101e:	5a 82       	std	Y+2, r5	; 0x02
    1020:	0b 83       	std	Y+3, r16	; 0x03
    1022:	1c 83       	std	Y+4, r17	; 0x04
    1024:	69 81       	ldd	r22, Y+1	; 0x01
    1026:	7a 81       	ldd	r23, Y+2	; 0x02
    1028:	8b 81       	ldd	r24, Y+3	; 0x03
    102a:	9c 81       	ldd	r25, Y+4	; 0x04
    102c:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <__subsf3>
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
    1030:	9b 01       	movw	r18, r22
    1032:	ac 01       	movw	r20, r24
    1034:	79 82       	std	Y+1, r7	; 0x01
    1036:	8a 82       	std	Y+2, r8	; 0x02
    1038:	eb 82       	std	Y+3, r14	; 0x03
    103a:	fc 82       	std	Y+4, r15	; 0x04
    103c:	69 81       	ldd	r22, Y+1	; 0x01
    103e:	7a 81       	ldd	r23, Y+2	; 0x02
    1040:	8b 81       	ldd	r24, Y+3	; 0x03
    1042:	9c 81       	ldd	r25, Y+4	; 0x04
    1044:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <__subsf3>
    1048:	20 e0       	ldi	r18, 0x00	; 0
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	40 e2       	ldi	r20, 0x20	; 32
    104e:	51 e4       	ldi	r21, 0x41	; 65
    1050:	69 83       	std	Y+1, r22	; 0x01
    1052:	7a 83       	std	Y+2, r23	; 0x02
    1054:	8b 83       	std	Y+3, r24	; 0x03
    1056:	9c 83       	std	Y+4, r25	; 0x04
    1058:	69 81       	ldd	r22, Y+1	; 0x01
    105a:	7a 81       	ldd	r23, Y+2	; 0x02
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <__mulsf3>
                b=((int)((int)b/(int)slope));
    1064:	69 83       	std	Y+1, r22	; 0x01
    1066:	7a 83       	std	Y+2, r23	; 0x02
    1068:	8b 83       	std	Y+3, r24	; 0x03
    106a:	9c 83       	std	Y+4, r25	; 0x04
    106c:	69 81       	ldd	r22, Y+1	; 0x01
    106e:	7a 81       	ldd	r23, Y+2	; 0x02
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	9c 81       	ldd	r25, Y+4	; 0x04
    1074:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <__fixsfsi>
    1078:	8b 01       	movw	r16, r22
    107a:	99 82       	std	Y+1, r9	; 0x01
    107c:	aa 82       	std	Y+2, r10	; 0x02
    107e:	bb 82       	std	Y+3, r11	; 0x03
    1080:	cc 82       	std	Y+4, r12	; 0x04
    1082:	69 81       	ldd	r22, Y+1	; 0x01
    1084:	7a 81       	ldd	r23, Y+2	; 0x02
    1086:	8b 81       	ldd	r24, Y+3	; 0x03
    1088:	9c 81       	ldd	r25, Y+4	; 0x04
    108a:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <__fixsfsi>
    108e:	69 83       	std	Y+1, r22	; 0x01
    1090:	7a 83       	std	Y+2, r23	; 0x02
    1092:	8b 83       	std	Y+3, r24	; 0x03
    1094:	9c 83       	std	Y+4, r25	; 0x04
    1096:	c8 01       	movw	r24, r16
    1098:	69 81       	ldd	r22, Y+1	; 0x01
    109a:	7a 81       	ldd	r23, Y+2	; 0x02
    109c:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <__divmodhi4>
                dist_low=b;
    10a0:	16 2f       	mov	r17, r22
    if (dist_low != 255) {
    10a2:	6f 3f       	cpi	r22, 0xFF	; 255
    10a4:	09 f0       	breq	.+2      	; 0x10a8 <estimate_distance+0x706>
    10a6:	3b ce       	rjmp	.-906    	; 0xd1e <estimate_distance+0x37c>
    10a8:	81 e2       	ldi	r24, 0x21	; 33
    10aa:	8d 0d       	add	r24, r13
    10ac:	ea ce       	rjmp	.-556    	; 0xe82 <estimate_distance+0x4e0>
            for(i=1; i<14; i++) {
    10ae:	66 24       	eor	r6, r6
    10b0:	63 94       	inc	r6
                if(dist->low_gain > kilo_irlow[i]) {
    10b2:	e1 e0       	ldi	r30, 0x01	; 1
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	3b cf       	rjmp	.-394    	; 0xf2e <estimate_distance+0x58c>
            for(i=1; i<14; i++) {
    10b8:	82 e0       	ldi	r24, 0x02	; 2
    10ba:	68 2e       	mov	r6, r24
                if(dist->low_gain > kilo_irlow[i]) {
    10bc:	e2 e0       	ldi	r30, 0x02	; 2
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	36 cf       	rjmp	.-404    	; 0xf2e <estimate_distance+0x58c>
            for(i=1; i<14; i++) {
    10c2:	b3 e0       	ldi	r27, 0x03	; 3
    10c4:	6b 2e       	mov	r6, r27
                if(dist->low_gain > kilo_irlow[i]) {
    10c6:	e3 e0       	ldi	r30, 0x03	; 3
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	31 cf       	rjmp	.-414    	; 0xf2e <estimate_distance+0x58c>
            for(i=1; i<14; i++) {
    10cc:	a4 e0       	ldi	r26, 0x04	; 4
    10ce:	6a 2e       	mov	r6, r26
                if(dist->low_gain > kilo_irlow[i]) {
    10d0:	e4 e0       	ldi	r30, 0x04	; 4
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	2c cf       	rjmp	.-424    	; 0xf2e <estimate_distance+0x58c>
            for(i=1; i<14; i++) {
    10d6:	f5 e0       	ldi	r31, 0x05	; 5
    10d8:	6f 2e       	mov	r6, r31
                if(dist->low_gain > kilo_irlow[i]) {
    10da:	e5 e0       	ldi	r30, 0x05	; 5
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	27 cf       	rjmp	.-434    	; 0xf2e <estimate_distance+0x58c>
            for (i=1; i<14; i++) {
    10e0:	81 e0       	ldi	r24, 0x01	; 1
                if (dist->high_gain > kilo_irhigh[i]) {
    10e2:	21 e0       	ldi	r18, 0x01	; 1
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	e9 ce       	rjmp	.-558    	; 0xeba <estimate_distance+0x518>
            for(i=1; i<14; i++) {
    10e8:	e6 e0       	ldi	r30, 0x06	; 6
    10ea:	6e 2e       	mov	r6, r30
                if(dist->low_gain > kilo_irlow[i]) {
    10ec:	e6 e0       	ldi	r30, 0x06	; 6
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	1e cf       	rjmp	.-452    	; 0xf2e <estimate_distance+0x58c>
            for (i=1; i<14; i++) {
    10f2:	82 e0       	ldi	r24, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
    10f4:	22 e0       	ldi	r18, 0x02	; 2
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	e0 ce       	rjmp	.-576    	; 0xeba <estimate_distance+0x518>
            for(i=1; i<14; i++) {
    10fa:	77 e0       	ldi	r23, 0x07	; 7
    10fc:	67 2e       	mov	r6, r23
                if(dist->low_gain > kilo_irlow[i]) {
    10fe:	e7 e0       	ldi	r30, 0x07	; 7
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	15 cf       	rjmp	.-470    	; 0xf2e <estimate_distance+0x58c>
            for (i=1; i<14; i++) {
    1104:	83 e0       	ldi	r24, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
    1106:	23 e0       	ldi	r18, 0x03	; 3
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	d7 ce       	rjmp	.-594    	; 0xeba <estimate_distance+0x518>
            for(i=1; i<14; i++) {
    110c:	68 e0       	ldi	r22, 0x08	; 8
    110e:	66 2e       	mov	r6, r22
                if(dist->low_gain > kilo_irlow[i]) {
    1110:	e8 e0       	ldi	r30, 0x08	; 8
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	0c cf       	rjmp	.-488    	; 0xf2e <estimate_distance+0x58c>
            for (i=1; i<14; i++) {
    1116:	85 e0       	ldi	r24, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
    1118:	25 e0       	ldi	r18, 0x05	; 5
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	ce ce       	rjmp	.-612    	; 0xeba <estimate_distance+0x518>
            for(i=1; i<14; i++) {
    111e:	4a e0       	ldi	r20, 0x0A	; 10
    1120:	64 2e       	mov	r6, r20
                if(dist->low_gain > kilo_irlow[i]) {
    1122:	ea e0       	ldi	r30, 0x0A	; 10
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	03 cf       	rjmp	.-506    	; 0xf2e <estimate_distance+0x58c>
            for (i=1; i<14; i++) {
    1128:	86 e0       	ldi	r24, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
    112a:	26 e0       	ldi	r18, 0x06	; 6
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	c5 ce       	rjmp	.-630    	; 0xeba <estimate_distance+0x518>
            for(i=1; i<14; i++) {
    1130:	3b e0       	ldi	r19, 0x0B	; 11
    1132:	63 2e       	mov	r6, r19
                if(dist->low_gain > kilo_irlow[i]) {
    1134:	eb e0       	ldi	r30, 0x0B	; 11
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	fa ce       	rjmp	.-524    	; 0xf2e <estimate_distance+0x58c>
            for (i=1; i<14; i++) {
    113a:	87 e0       	ldi	r24, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
    113c:	27 e0       	ldi	r18, 0x07	; 7
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	bc ce       	rjmp	.-648    	; 0xeba <estimate_distance+0x518>
            for(i=1; i<14; i++) {
    1142:	2c e0       	ldi	r18, 0x0C	; 12
    1144:	62 2e       	mov	r6, r18
                if(dist->low_gain > kilo_irlow[i]) {
    1146:	ec e0       	ldi	r30, 0x0C	; 12
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	f1 ce       	rjmp	.-542    	; 0xf2e <estimate_distance+0x58c>
            for (i=1; i<14; i++) {
    114c:	88 e0       	ldi	r24, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
    114e:	28 e0       	ldi	r18, 0x08	; 8
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	b3 ce       	rjmp	.-666    	; 0xeba <estimate_distance+0x518>
            for(i=1; i<14; i++) {
    1154:	9d e0       	ldi	r25, 0x0D	; 13
    1156:	69 2e       	mov	r6, r25
                if(dist->low_gain > kilo_irlow[i]) {
    1158:	ed e0       	ldi	r30, 0x0D	; 13
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	e8 ce       	rjmp	.-560    	; 0xf2e <estimate_distance+0x58c>
            for (i=1; i<14; i++) {
    115e:	8a e0       	ldi	r24, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
    1160:	2a e0       	ldi	r18, 0x0A	; 10
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	aa ce       	rjmp	.-684    	; 0xeba <estimate_distance+0x518>
            for (i=1; i<14; i++) {
    1166:	8b e0       	ldi	r24, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
    1168:	2b e0       	ldi	r18, 0x0B	; 11
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	a6 ce       	rjmp	.-692    	; 0xeba <estimate_distance+0x518>
            for (i=1; i<14; i++) {
    116e:	8c e0       	ldi	r24, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
    1170:	2c e0       	ldi	r18, 0x0C	; 12
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	a2 ce       	rjmp	.-700    	; 0xeba <estimate_distance+0x518>

00001176 <__vector_14>:
ISR(TIMER0_COMPA_vect) {
    1176:	1f 92       	push	r1
    1178:	0f 92       	push	r0
    117a:	0f b6       	in	r0, 0x3f	; 63
    117c:	0f 92       	push	r0
    117e:	11 24       	eor	r1, r1
    1180:	2f 93       	push	r18
    1182:	3f 93       	push	r19
    1184:	4f 93       	push	r20
    1186:	5f 93       	push	r21
    1188:	6f 93       	push	r22
    118a:	7f 93       	push	r23
    118c:	8f 93       	push	r24
    118e:	9f 93       	push	r25
    1190:	af 93       	push	r26
    1192:	bf 93       	push	r27
    1194:	ef 93       	push	r30
    1196:	ff 93       	push	r31
    tx_clock += tx_increment;
    1198:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <tx_clock>
    119c:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <tx_clock+0x1>
    11a0:	20 91 73 01 	lds	r18, 0x0173	; 0x800173 <tx_increment>
    11a4:	30 91 74 01 	lds	r19, 0x0174	; 0x800174 <tx_increment+0x1>
    11a8:	82 0f       	add	r24, r18
    11aa:	93 1f       	adc	r25, r19
    11ac:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <tx_clock+0x1>
    11b0:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <tx_clock>
    tx_increment = 0xFF;
    11b4:	8f ef       	ldi	r24, 0xFF	; 255
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	90 93 74 01 	sts	0x0174, r25	; 0x800174 <tx_increment+0x1>
    11bc:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <tx_increment>
    OCR0A = tx_increment;
    11c0:	8f ef       	ldi	r24, 0xFF	; 255
    11c2:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
    11c4:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <kilo_ticks>
    11c8:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <kilo_ticks+0x1>
    11cc:	a0 91 53 01 	lds	r26, 0x0153	; 0x800153 <kilo_ticks+0x2>
    11d0:	b0 91 54 01 	lds	r27, 0x0154	; 0x800154 <kilo_ticks+0x3>
    11d4:	01 96       	adiw	r24, 0x01	; 1
    11d6:	a1 1d       	adc	r26, r1
    11d8:	b1 1d       	adc	r27, r1
    11da:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <kilo_ticks>
    11de:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <kilo_ticks+0x1>
    11e2:	a0 93 53 01 	sts	0x0153, r26	; 0x800153 <kilo_ticks+0x2>
    11e6:	b0 93 54 01 	sts	0x0154, r27	; 0x800154 <kilo_ticks+0x3>
    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
    11ea:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <rx_busy>
    11ee:	81 11       	cpse	r24, r1
    11f0:	0f c0       	rjmp	.+30     	; 0x1210 <__vector_14+0x9a>
    11f2:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <kilo_tx_period>
    11f6:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <kilo_tx_period+0x1>
    11fa:	20 91 75 01 	lds	r18, 0x0175	; 0x800175 <tx_clock>
    11fe:	30 91 76 01 	lds	r19, 0x0176	; 0x800176 <tx_clock+0x1>
    1202:	82 17       	cp	r24, r18
    1204:	93 07       	cpc	r25, r19
    1206:	20 f4       	brcc	.+8      	; 0x1210 <__vector_14+0x9a>
    1208:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <kilo_state>
    120c:	84 30       	cpi	r24, 0x04	; 4
    120e:	89 f0       	breq	.+34     	; 0x1232 <__vector_14+0xbc>
}
    1210:	ff 91       	pop	r31
    1212:	ef 91       	pop	r30
    1214:	bf 91       	pop	r27
    1216:	af 91       	pop	r26
    1218:	9f 91       	pop	r25
    121a:	8f 91       	pop	r24
    121c:	7f 91       	pop	r23
    121e:	6f 91       	pop	r22
    1220:	5f 91       	pop	r21
    1222:	4f 91       	pop	r20
    1224:	3f 91       	pop	r19
    1226:	2f 91       	pop	r18
    1228:	0f 90       	pop	r0
    122a:	0f be       	out	0x3f, r0	; 63
    122c:	0f 90       	pop	r0
    122e:	1f 90       	pop	r1
    1230:	18 95       	reti
        message_t *msg = kilo_message_tx();
    1232:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <kilo_message_tx>
    1236:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <kilo_message_tx+0x1>
    123a:	09 95       	icall
        if (msg) {
    123c:	00 97       	sbiw	r24, 0x00	; 0
    123e:	41 f3       	breq	.-48     	; 0x1210 <__vector_14+0x9a>
            if (message_send(msg)) {
    1240:	0e 94 3a 0c 	call	0x1874	; 0x1874 <message_send>
    1244:	88 23       	and	r24, r24
    1246:	51 f0       	breq	.+20     	; 0x125c <__vector_14+0xe6>
                kilo_message_tx_success();
    1248:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <kilo_message_tx_success>
    124c:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <kilo_message_tx_success+0x1>
    1250:	09 95       	icall
                tx_clock = 0;
    1252:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <tx_clock+0x1>
    1256:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <tx_clock>
    125a:	da cf       	rjmp	.-76     	; 0x1210 <__vector_14+0x9a>
                tx_increment = rand()&0xFF;
    125c:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <rand>
    1260:	9c 01       	movw	r18, r24
    1262:	99 27       	eor	r25, r25
    1264:	90 93 74 01 	sts	0x0174, r25	; 0x800174 <tx_increment+0x1>
    1268:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <tx_increment>
                OCR0A = tx_increment;
    126c:	27 bd       	out	0x27, r18	; 39
}
    126e:	d0 cf       	rjmp	.-96     	; 0x1210 <__vector_14+0x9a>

00001270 <set_color>:
    if (rgb&(1<<0))
    1270:	80 ff       	sbrs	r24, 0
    1272:	11 c0       	rjmp	.+34     	; 0x1296 <set_color+0x26>
        DDRD |= (1<<5);
    1274:	55 9a       	sbi	0x0a, 5	; 10
    if (rgb&(1<<1))
    1276:	81 ff       	sbrs	r24, 1
    1278:	11 c0       	rjmp	.+34     	; 0x129c <set_color+0x2c>
        DDRD |= (1<<4);
    127a:	54 9a       	sbi	0x0a, 4	; 10
    if (rgb&(1<<2))
    127c:	82 ff       	sbrs	r24, 2
    127e:	11 c0       	rjmp	.+34     	; 0x12a2 <set_color+0x32>
        DDRC |= (1<<3);
    1280:	3b 9a       	sbi	0x07, 3	; 7
    if (rgb&(1<<3))
    1282:	83 ff       	sbrs	r24, 3
    1284:	11 c0       	rjmp	.+34     	; 0x12a8 <set_color+0x38>
        DDRC |= (1<<2);
    1286:	3a 9a       	sbi	0x07, 2	; 7
    if (rgb&(1<<4))
    1288:	84 ff       	sbrs	r24, 4
    128a:	11 c0       	rjmp	.+34     	; 0x12ae <set_color+0x3e>
        DDRC |= (1<<5);
    128c:	3d 9a       	sbi	0x07, 5	; 7
    if (rgb&(1<<5))
    128e:	85 ff       	sbrs	r24, 5
    1290:	11 c0       	rjmp	.+34     	; 0x12b4 <set_color+0x44>
        DDRC |= (1<<4);
    1292:	3c 9a       	sbi	0x07, 4	; 7
    1294:	08 95       	ret
        DDRD &= ~(1<<5);
    1296:	55 98       	cbi	0x0a, 5	; 10
    if (rgb&(1<<1))
    1298:	81 fd       	sbrc	r24, 1
    129a:	ef cf       	rjmp	.-34     	; 0x127a <set_color+0xa>
        DDRD &= ~(1<<4);
    129c:	54 98       	cbi	0x0a, 4	; 10
    if (rgb&(1<<2))
    129e:	82 fd       	sbrc	r24, 2
    12a0:	ef cf       	rjmp	.-34     	; 0x1280 <set_color+0x10>
        DDRC &= ~(1<<3);
    12a2:	3b 98       	cbi	0x07, 3	; 7
    if (rgb&(1<<3))
    12a4:	83 fd       	sbrc	r24, 3
    12a6:	ef cf       	rjmp	.-34     	; 0x1286 <set_color+0x16>
        DDRC &= ~(1<<2);
    12a8:	3a 98       	cbi	0x07, 2	; 7
    if (rgb&(1<<4))
    12aa:	84 fd       	sbrc	r24, 4
    12ac:	ef cf       	rjmp	.-34     	; 0x128c <set_color+0x1c>
        DDRC &= ~(1<<5);
    12ae:	3d 98       	cbi	0x07, 5	; 7
    if (rgb&(1<<5))
    12b0:	85 fd       	sbrc	r24, 5
    12b2:	ef cf       	rjmp	.-34     	; 0x1292 <set_color+0x22>
        DDRC &= ~(1<<4);
    12b4:	3c 98       	cbi	0x07, 4	; 7
}
    12b6:	08 95       	ret

000012b8 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
    12b8:	1f 92       	push	r1
    12ba:	1f b6       	in	r1, 0x3f	; 63
    12bc:	1f 92       	push	r1
    12be:	11 24       	eor	r1, r1
    12c0:	8f 93       	push	r24
    12c2:	9f 93       	push	r25
    rx_timer_off();
    12c4:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    12c8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    12cc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    rx_leadingbit = 1;
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <rx_leadingbit>
    rx_leadingbyte = 1;
    12d6:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <rx_leadingbyte>
    rx_busy = 0;
    12da:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <rx_busy>
    adc_trigger_high_gain();
    12de:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    12e2:	93 ea       	ldi	r25, 0xA3	; 163
    12e4:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    12e8:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
}
    12ec:	9f 91       	pop	r25
    12ee:	8f 91       	pop	r24
    12f0:	1f 90       	pop	r1
    12f2:	1f be       	out	0x3f, r1	; 63
    12f4:	1f 90       	pop	r1
    12f6:	18 95       	reti

000012f8 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
    12f8:	1f 92       	push	r1
    12fa:	0f 92       	push	r0
    12fc:	0f b6       	in	r0, 0x3f	; 63
    12fe:	0f 92       	push	r0
    1300:	11 24       	eor	r1, r1
    1302:	0f 93       	push	r16
    1304:	1f 93       	push	r17
    1306:	2f 93       	push	r18
    1308:	3f 93       	push	r19
    130a:	4f 93       	push	r20
    130c:	5f 93       	push	r21
    130e:	6f 93       	push	r22
    1310:	7f 93       	push	r23
    1312:	8f 93       	push	r24
    1314:	9f 93       	push	r25
    1316:	af 93       	push	r26
    1318:	bf 93       	push	r27
    131a:	ef 93       	push	r30
    131c:	ff 93       	push	r31
    131e:	cf 93       	push	r28
    1320:	df 93       	push	r29
    1322:	00 d0       	rcall	.+0      	; 0x1324 <__vector_23+0x2c>
    1324:	00 d0       	rcall	.+0      	; 0x1326 <__vector_23+0x2e>
    1326:	cd b7       	in	r28, 0x3d	; 61
    1328:	de b7       	in	r29, 0x3e	; 62
    uint16_t timer = TCNT1;
    132a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    132e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    rx_busy = 1;
    1332:	41 e0       	ldi	r20, 0x01	; 1
    1334:	40 93 55 01 	sts	0x0155, r20	; 0x800155 <rx_busy>
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
    1338:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <rx_leadingbit>
    133c:	88 23       	and	r24, r24
    133e:	d9 f1       	breq	.+118    	; 0x13b6 <__vector_23+0xbe>
        rx_timer_on();
    1340:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1344:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1348:	40 93 81 00 	sts	0x0081, r20	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
        rx_bytevalue = 0;
    134c:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <rx_bytevalue>
        rx_leadingbit = 0;
    1350:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <rx_leadingbit>
        if (rx_leadingbyte) {
    1354:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <rx_leadingbyte>
    1358:	88 23       	and	r24, r24
    135a:	a1 f0       	breq	.+40     	; 0x1384 <__vector_23+0x8c>
            adc_finish_conversion();
    135c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1360:	86 fd       	sbrc	r24, 6
    1362:	fc cf       	rjmp	.-8      	; 0x135c <__vector_23+0x64>
            rx_dist.high_gain = ADCW;
    1364:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    1368:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    136c:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <rx_dist+0x3>
    1370:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <rx_dist+0x2>
            adc_trigger_low_gain();
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    137a:	93 ea       	ldi	r25, 0xA3	; 163
    137c:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1380:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
                    }
                }
            }
        }
    }
}
    1384:	0f 90       	pop	r0
    1386:	0f 90       	pop	r0
    1388:	0f 90       	pop	r0
    138a:	0f 90       	pop	r0
    138c:	df 91       	pop	r29
    138e:	cf 91       	pop	r28
    1390:	ff 91       	pop	r31
    1392:	ef 91       	pop	r30
    1394:	bf 91       	pop	r27
    1396:	af 91       	pop	r26
    1398:	9f 91       	pop	r25
    139a:	8f 91       	pop	r24
    139c:	7f 91       	pop	r23
    139e:	6f 91       	pop	r22
    13a0:	5f 91       	pop	r21
    13a2:	4f 91       	pop	r20
    13a4:	3f 91       	pop	r19
    13a6:	2f 91       	pop	r18
    13a8:	1f 91       	pop	r17
    13aa:	0f 91       	pop	r16
    13ac:	0f 90       	pop	r0
    13ae:	0f be       	out	0x3f, r0	; 63
    13b0:	0f 90       	pop	r0
    13b2:	1f 90       	pop	r1
    13b4:	18 95       	reti
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
    13b6:	c9 01       	movw	r24, r18
    13b8:	87 58       	subi	r24, 0x87	; 135
    13ba:	91 09       	sbc	r25, r1
    13bc:	84 37       	cpi	r24, 0x74	; 116
    13be:	99 40       	sbci	r25, 0x09	; 9
    13c0:	a0 f0       	brcs	.+40     	; 0x13ea <__vector_23+0xf2>
            rx_timer_off();
    13c2:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    13c6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    13ca:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
            rx_leadingbit = 1;
    13ce:	40 93 2e 01 	sts	0x012E, r20	; 0x80012e <rx_leadingbit>
            rx_leadingbyte = 1;
    13d2:	40 93 72 01 	sts	0x0172, r20	; 0x800172 <rx_leadingbyte>
            rx_busy = 0;
    13d6:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <rx_busy>
            adc_trigger_high_gain();
    13da:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    13de:	83 ea       	ldi	r24, 0xA3	; 163
    13e0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    13e4:	40 93 7b 00 	sts	0x007B, r20	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
    13e8:	cd cf       	rjmp	.-102    	; 0x1384 <__vector_23+0x8c>
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
    13ea:	26 58       	subi	r18, 0x86	; 134
    13ec:	31 09       	sbc	r19, r1
    13ee:	a4 ef       	ldi	r26, 0xF4	; 244
    13f0:	b0 e0       	ldi	r27, 0x00	; 0
    13f2:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__umulhisi3>
    13f6:	69 83       	std	Y+1, r22	; 0x01
    13f8:	7a 83       	std	Y+2, r23	; 0x02
    13fa:	8b 83       	std	Y+3, r24	; 0x03
    13fc:	9c 83       	std	Y+4, r25	; 0x04
    13fe:	8c 01       	movw	r16, r24
    1400:	22 27       	eor	r18, r18
    1402:	33 27       	eor	r19, r19
            if (bitindex <= 7) { // Data bit received.
    1404:	88 30       	cpi	r24, 0x08	; 8
    1406:	08 f4       	brcc	.+2      	; 0x140a <__vector_23+0x112>
    1408:	65 c0       	rjmp	.+202    	; 0x14d4 <__vector_23+0x1dc>
                rx_leadingbit = 1;
    140a:	40 93 2e 01 	sts	0x012E, r20	; 0x80012e <rx_leadingbit>
                if (rx_leadingbyte) {
    140e:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <rx_leadingbyte>
    1412:	81 11       	cpse	r24, r1
    1414:	3c c0       	rjmp	.+120    	; 0x148e <__vector_23+0x196>
                    rawmsg[rx_byteindex] = rx_bytevalue;
    1416:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <rx_byteindex>
    141a:	e8 2f       	mov	r30, r24
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	e8 58       	subi	r30, 0x88	; 136
    1420:	fe 4f       	sbci	r31, 0xFE	; 254
    1422:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <rx_bytevalue>
    1426:	90 83       	st	Z, r25
                    rx_byteindex++;
    1428:	8f 5f       	subi	r24, 0xFF	; 255
    142a:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <rx_byteindex>
                    if (rx_byteindex == sizeof(message_t)) {
    142e:	8c 30       	cpi	r24, 0x0C	; 12
    1430:	09 f0       	breq	.+2      	; 0x1434 <__vector_23+0x13c>
    1432:	a8 cf       	rjmp	.-176    	; 0x1384 <__vector_23+0x8c>
                        rx_timer_off();
    1434:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1438:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    143c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
                        rx_leadingbyte = 1;
    1440:	40 93 72 01 	sts	0x0172, r20	; 0x800172 <rx_leadingbyte>
                        rx_busy = 0;
    1444:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <rx_busy>
                        if (rx_msg.crc == message_crc(&rx_msg))
    1448:	00 91 82 01 	lds	r16, 0x0182	; 0x800182 <rx_msg+0xa>
    144c:	10 91 83 01 	lds	r17, 0x0183	; 0x800183 <rx_msg+0xb>
    1450:	88 e7       	ldi	r24, 0x78	; 120
    1452:	91 e0       	ldi	r25, 0x01	; 1
    1454:	0e 94 82 0b 	call	0x1704	; 0x1704 <message_crc>
    1458:	08 17       	cp	r16, r24
    145a:	19 07       	cpc	r17, r25
    145c:	09 f0       	breq	.+2      	; 0x1460 <__vector_23+0x168>
    145e:	92 cf       	rjmp	.-220    	; 0x1384 <__vector_23+0x8c>
    if (rx_msg.type < BOOT) {
    1460:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <rx_msg+0x9>
    1464:	e7 ff       	sbrs	r30, 7
    1466:	48 c0       	rjmp	.+144    	; 0x14f8 <__vector_23+0x200>
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    1468:	98 e7       	ldi	r25, 0x78	; 120
    146a:	9e 0f       	add	r25, r30
    146c:	93 30       	cpi	r25, 0x03	; 3
    146e:	30 f0       	brcs	.+12     	; 0x147c <__vector_23+0x184>
        motors_off();
    1470:	53 98       	cbi	0x0a, 3	; 10
    1472:	23 98       	cbi	0x04, 3	; 4
    1474:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    1478:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    switch (rx_msg.type) {
    147c:	e0 58       	subi	r30, 0x80	; 128
    147e:	eb 30       	cpi	r30, 0x0B	; 11
    1480:	08 f0       	brcs	.+2      	; 0x1484 <__vector_23+0x18c>
    1482:	80 cf       	rjmp	.-256    	; 0x1384 <__vector_23+0x8c>
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	e4 5f       	subi	r30, 0xF4	; 244
    1488:	ff 4e       	sbci	r31, 0xEF	; 239
    148a:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__tablejump2__>
                    adc_finish_conversion();
    148e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1492:	86 fd       	sbrc	r24, 6
    1494:	fc cf       	rjmp	.-8      	; 0x148e <__vector_23+0x196>
                    rx_dist.low_gain = ADCW;
    1496:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    149a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    149e:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <rx_dist+0x1>
    14a2:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <rx_dist>
                    adc_trigger_high_gain();
    14a6:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    14aa:	83 ea       	ldi	r24, 0xA3	; 163
    14ac:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
                    if (rx_bytevalue != 0) { // Collision detected.
    14b6:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <rx_bytevalue>
    14ba:	99 23       	and	r25, r25
    14bc:	c1 f0       	breq	.+48     	; 0x14ee <__vector_23+0x1f6>
                        rx_timer_off();
    14be:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    14c2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    14c6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
                        rx_leadingbyte = 1;
    14ca:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <rx_leadingbyte>
                        rx_busy = 0;
    14ce:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <rx_busy>
    14d2:	58 cf       	rjmp	.-336    	; 0x1384 <__vector_23+0x8c>
                rx_bytevalue |= (1<<bitindex);
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	9c 01       	movw	r18, r24
    14da:	01 c0       	rjmp	.+2      	; 0x14de <__vector_23+0x1e6>
    14dc:	22 0f       	add	r18, r18
    14de:	0a 95       	dec	r16
    14e0:	ea f7       	brpl	.-6      	; 0x14dc <__vector_23+0x1e4>
    14e2:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <rx_bytevalue>
    14e6:	82 2b       	or	r24, r18
    14e8:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <rx_bytevalue>
    14ec:	4b cf       	rjmp	.-362    	; 0x1384 <__vector_23+0x8c>
                        rx_leadingbyte = 0;
    14ee:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <rx_leadingbyte>
                        rx_byteindex = 0;
    14f2:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <rx_byteindex>
    14f6:	46 cf       	rjmp	.-372    	; 0x1384 <__vector_23+0x8c>
        kilo_message_rx(&rx_msg, &rx_dist);
    14f8:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <kilo_message_rx>
    14fc:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <kilo_message_rx+0x1>
    1500:	6d e4       	ldi	r22, 0x4D	; 77
    1502:	71 e0       	ldi	r23, 0x01	; 1
    1504:	88 e7       	ldi	r24, 0x78	; 120
    1506:	91 e0       	ldi	r25, 0x01	; 1
    1508:	09 95       	icall
        return;
    150a:	3c cf       	rjmp	.-392    	; 0x1384 <__vector_23+0x8c>
            switch(calibmsg->mode) {
    150c:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <rx_msg>
    1510:	82 30       	cpi	r24, 0x02	; 2
    1512:	09 f4       	brne	.+2      	; 0x1516 <__vector_23+0x21e>
    1514:	81 c0       	rjmp	.+258    	; 0x1618 <__vector_23+0x320>
    1516:	08 f0       	brcs	.+2      	; 0x151a <__vector_23+0x222>
    1518:	68 c0       	rjmp	.+208    	; 0x15ea <__vector_23+0x2f2>
    151a:	88 23       	and	r24, r24
    151c:	09 f4       	brne	.+2      	; 0x1520 <__vector_23+0x228>
    151e:	ba c0       	rjmp	.+372    	; 0x1694 <__vector_23+0x39c>
                    kilo_uid = calibmsg->uid;
    1520:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <rx_msg+0x1>
    1524:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <rx_msg+0x2>
    1528:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <kilo_uid+0x1>
    152c:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <kilo_uid>
                    cur_motion = MOVE_STOP;
    1530:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <cur_motion>
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1534:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <kilo_state>
    1538:	86 30       	cpi	r24, 0x06	; 6
    153a:	09 f4       	brne	.+2      	; 0x153e <__vector_23+0x246>
    153c:	23 cf       	rjmp	.-442    	; 0x1384 <__vector_23+0x8c>
                motors_on();
    153e:	53 9a       	sbi	0x0a, 3	; 10
    1540:	23 9a       	sbi	0x04, 3	; 4
    1542:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    1546:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
                kilo_state = MOVING;
    154a:	86 e0       	ldi	r24, 0x06	; 6
    154c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <kilo_state>
    1550:	19 cf       	rjmp	.-462    	; 0x1384 <__vector_23+0x8c>
            if (kilo_state != MOVING) {
    1552:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <kilo_state>
    1556:	86 30       	cpi	r24, 0x06	; 6
    1558:	79 f0       	breq	.+30     	; 0x1578 <__vector_23+0x280>
                motors_on();
    155a:	53 9a       	sbi	0x0a, 3	; 10
    155c:	23 9a       	sbi	0x04, 3	; 4
    155e:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    1562:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
                set_color(RGB(0,0,0));
    1566:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <set_color.constprop.6>
                prev_motion = cur_motion = MOVE_STOP;
    156a:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <cur_motion>
    156e:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <prev_motion>
                kilo_state = MOVING;
    1572:	86 e0       	ldi	r24, 0x06	; 6
    1574:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <kilo_state>
            if (kilo_uid&(1<<rx_msg.data[0]))
    1578:	20 91 78 01 	lds	r18, 0x0178	; 0x800178 <rx_msg>
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <__vector_23+0x28e>
    1582:	88 0f       	add	r24, r24
    1584:	99 1f       	adc	r25, r25
    1586:	2a 95       	dec	r18
    1588:	e2 f7       	brpl	.-8      	; 0x1582 <__vector_23+0x28a>
    158a:	20 91 87 01 	lds	r18, 0x0187	; 0x800187 <kilo_uid>
    158e:	30 91 88 01 	lds	r19, 0x0188	; 0x800188 <kilo_uid+0x1>
    1592:	82 23       	and	r24, r18
    1594:	93 23       	and	r25, r19
    1596:	89 2b       	or	r24, r25
    1598:	09 f4       	brne	.+2      	; 0x159c <__vector_23+0x2a4>
    159a:	79 c0       	rjmp	.+242    	; 0x168e <__vector_23+0x396>
                cur_motion = MOVE_LEFT;
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <cur_motion>
    15a2:	f0 ce       	rjmp	.-544    	; 0x1384 <__vector_23+0x8c>
            kilo_state = BATTERY;
    15a4:	82 e0       	ldi	r24, 0x02	; 2
    15a6:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <kilo_state>
            break;
    15aa:	ec ce       	rjmp	.-552    	; 0x1384 <__vector_23+0x8c>
            kilo_state = CHARGING;
    15ac:	85 e0       	ldi	r24, 0x05	; 5
    15ae:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <kilo_state>
            break;
    15b2:	e8 ce       	rjmp	.-560    	; 0x1384 <__vector_23+0x8c>
            kilo_state = IDLE;
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <kilo_state>
            break;
    15ba:	e4 ce       	rjmp	.-568    	; 0x1384 <__vector_23+0x8c>
            kilo_state = SLEEPING;
    15bc:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <kilo_state>
            break;
    15c0:	e1 ce       	rjmp	.-574    	; 0x1384 <__vector_23+0x8c>
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    15c2:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <kilo_state>
    15c6:	83 30       	cpi	r24, 0x03	; 3
    15c8:	09 f4       	brne	.+2      	; 0x15cc <__vector_23+0x2d4>
    15ca:	dc ce       	rjmp	.-584    	; 0x1384 <__vector_23+0x8c>
    15cc:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <kilo_state>
    15d0:	84 30       	cpi	r24, 0x04	; 4
    15d2:	09 f4       	brne	.+2      	; 0x15d6 <__vector_23+0x2de>
    15d4:	d7 ce       	rjmp	.-594    	; 0x1384 <__vector_23+0x8c>
                motors_on();
    15d6:	53 9a       	sbi	0x0a, 3	; 10
    15d8:	23 9a       	sbi	0x04, 3	; 4
    15da:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    15de:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
                kilo_state = SETUP;
    15e2:	83 e0       	ldi	r24, 0x03	; 3
    15e4:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <kilo_state>
    15e8:	cd ce       	rjmp	.-614    	; 0x1384 <__vector_23+0x8c>
    15ea:	83 30       	cpi	r24, 0x03	; 3
    15ec:	61 f1       	breq	.+88     	; 0x1646 <__vector_23+0x34e>
    15ee:	84 30       	cpi	r24, 0x04	; 4
    15f0:	09 f0       	breq	.+2      	; 0x15f4 <__vector_23+0x2fc>
    15f2:	a0 cf       	rjmp	.-192    	; 0x1534 <__vector_23+0x23c>
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    15f4:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <cur_motion>
    15f8:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <rx_msg+0x6>
    15fc:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <rx_msg+0x5>
    1600:	23 30       	cpi	r18, 0x03	; 3
    1602:	c1 f0       	breq	.+48     	; 0x1634 <__vector_23+0x33c>
                        prev_motion = MOVE_STOP;
    1604:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <prev_motion>
                        cur_motion = MOVE_STRAIGHT;
    1608:	23 e0       	ldi	r18, 0x03	; 3
    160a:	20 93 12 01 	sts	0x0112, r18	; 0x800112 <cur_motion>
                        kilo_straight_left = calibmsg->straight_left;
    160e:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <kilo_straight_left>
                        kilo_straight_right = calibmsg->straight_right;
    1612:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <kilo_straight_right>
    1616:	8e cf       	rjmp	.-228    	; 0x1534 <__vector_23+0x23c>
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1618:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <cur_motion>
    161c:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <rx_msg+0x3>
    1620:	91 30       	cpi	r25, 0x01	; 1
    1622:	f9 f0       	breq	.+62     	; 0x1662 <__vector_23+0x36a>
                        prev_motion = MOVE_STOP;
    1624:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <prev_motion>
                        cur_motion = MOVE_LEFT;
    1628:	91 e0       	ldi	r25, 0x01	; 1
    162a:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <cur_motion>
                        kilo_turn_left = calibmsg->turn_left;
    162e:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <kilo_turn_left>
    1632:	80 cf       	rjmp	.-256    	; 0x1534 <__vector_23+0x23c>
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    1634:	20 91 8a 01 	lds	r18, 0x018A	; 0x80018a <kilo_straight_right>
    1638:	28 13       	cpse	r18, r24
    163a:	e4 cf       	rjmp	.-56     	; 0x1604 <__vector_23+0x30c>
    163c:	20 91 89 01 	lds	r18, 0x0189	; 0x800189 <kilo_straight_left>
    1640:	29 13       	cpse	r18, r25
    1642:	e0 cf       	rjmp	.-64     	; 0x1604 <__vector_23+0x30c>
    1644:	77 cf       	rjmp	.-274    	; 0x1534 <__vector_23+0x23c>
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1646:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <cur_motion>
    164a:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <rx_msg+0x4>
    164e:	92 30       	cpi	r25, 0x02	; 2
    1650:	69 f0       	breq	.+26     	; 0x166c <__vector_23+0x374>
                        prev_motion = MOVE_STOP;
    1652:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <prev_motion>
                        cur_motion = MOVE_RIGHT;
    1656:	92 e0       	ldi	r25, 0x02	; 2
    1658:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <cur_motion>
                        kilo_turn_right = calibmsg->turn_right;
    165c:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <kilo_turn_right>
    1660:	69 cf       	rjmp	.-302    	; 0x1534 <__vector_23+0x23c>
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1662:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <kilo_turn_left>
    1666:	98 13       	cpse	r25, r24
    1668:	dd cf       	rjmp	.-70     	; 0x1624 <__vector_23+0x32c>
    166a:	64 cf       	rjmp	.-312    	; 0x1534 <__vector_23+0x23c>
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    166c:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <kilo_turn_right>
    1670:	98 13       	cpse	r25, r24
    1672:	ef cf       	rjmp	.-34     	; 0x1652 <__vector_23+0x35a>
    1674:	5f cf       	rjmp	.-322    	; 0x1534 <__vector_23+0x23c>
            reset();
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	e0 e0       	ldi	r30, 0x00	; 0
    167a:	09 95       	icall
            tx_timer_off();
    167c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    1680:	8d 7f       	andi	r24, 0xFD	; 253
    1682:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    1686:	16 bc       	out	0x26, r1	; 38
            bootload();
    1688:	e0 e0       	ldi	r30, 0x00	; 0
    168a:	f0 e7       	ldi	r31, 0x70	; 112
    168c:	09 95       	icall
                cur_motion = MOVE_STOP;
    168e:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <cur_motion>
}
    1692:	78 ce       	rjmp	.-784    	; 0x1384 <__vector_23+0x8c>
                    if (kilo_state == MOVING) {
    1694:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <kilo_state>
    1698:	86 30       	cpi	r24, 0x06	; 6
    169a:	09 f0       	breq	.+2      	; 0x169e <__vector_23+0x3a6>
    169c:	73 ce       	rjmp	.-794    	; 0x1384 <__vector_23+0x8c>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    169e:	60 91 87 01 	lds	r22, 0x0187	; 0x800187 <kilo_uid>
    16a2:	80 eb       	ldi	r24, 0xB0	; 176
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    16aa:	60 91 88 01 	lds	r22, 0x0188	; 0x800188 <kilo_uid+0x1>
    16ae:	81 eb       	ldi	r24, 0xB1	; 177
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    16b6:	60 91 8b 01 	lds	r22, 0x018B	; 0x80018b <kilo_turn_left>
    16ba:	85 e0       	ldi	r24, 0x05	; 5
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    16c2:	60 91 77 01 	lds	r22, 0x0177	; 0x800177 <kilo_turn_right>
    16c6:	89 e0       	ldi	r24, 0x09	; 9
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    16ce:	60 91 89 01 	lds	r22, 0x0189	; 0x800189 <kilo_straight_left>
    16d2:	8c e0       	ldi	r24, 0x0C	; 12
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    16da:	60 91 8a 01 	lds	r22, 0x018A	; 0x80018a <kilo_straight_right>
    16de:	84 e1       	ldi	r24, 0x14	; 20
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <eeprom_write_byte>
                        motors_off();
    16e6:	53 98       	cbi	0x0a, 3	; 10
    16e8:	23 98       	cbi	0x04, 3	; 4
    16ea:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    16ee:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
                        kilo_state = IDLE;
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <kilo_state>
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    16f8:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <rx_msg>
    16fc:	88 23       	and	r24, r24
    16fe:	09 f4       	brne	.+2      	; 0x1702 <__vector_23+0x40a>
    1700:	41 ce       	rjmp	.-894    	; 0x1384 <__vector_23+0x8c>
    1702:	18 cf       	rjmp	.-464    	; 0x1534 <__vector_23+0x23c>

00001704 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    1704:	fc 01       	movw	r30, r24
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    1706:	20 81       	ld	r18, Z
    1708:	8f ef       	ldi	r24, 0xFF	; 255
    170a:	9f ef       	ldi	r25, 0xFF	; 255
    170c:	82 27       	eor	r24, r18
    170e:	08 2e       	mov	r0, r24
    1710:	82 95       	swap	r24
    1712:	80 7f       	andi	r24, 0xF0	; 240
    1714:	80 25       	eor	r24, r0
    1716:	09 2e       	mov	r0, r25
    1718:	98 2f       	mov	r25, r24
    171a:	82 95       	swap	r24
    171c:	8f 70       	andi	r24, 0x0F	; 15
    171e:	08 26       	eor	r0, r24
    1720:	86 95       	lsr	r24
    1722:	98 27       	eor	r25, r24
    1724:	89 27       	eor	r24, r25
    1726:	88 0f       	add	r24, r24
    1728:	88 0f       	add	r24, r24
    172a:	88 0f       	add	r24, r24
    172c:	80 25       	eor	r24, r0
    172e:	21 81       	ldd	r18, Z+1	; 0x01
    1730:	82 27       	eor	r24, r18
    1732:	08 2e       	mov	r0, r24
    1734:	82 95       	swap	r24
    1736:	80 7f       	andi	r24, 0xF0	; 240
    1738:	80 25       	eor	r24, r0
    173a:	09 2e       	mov	r0, r25
    173c:	98 2f       	mov	r25, r24
    173e:	82 95       	swap	r24
    1740:	8f 70       	andi	r24, 0x0F	; 15
    1742:	08 26       	eor	r0, r24
    1744:	86 95       	lsr	r24
    1746:	98 27       	eor	r25, r24
    1748:	89 27       	eor	r24, r25
    174a:	88 0f       	add	r24, r24
    174c:	88 0f       	add	r24, r24
    174e:	88 0f       	add	r24, r24
    1750:	80 25       	eor	r24, r0
    1752:	22 81       	ldd	r18, Z+2	; 0x02
    1754:	82 27       	eor	r24, r18
    1756:	08 2e       	mov	r0, r24
    1758:	82 95       	swap	r24
    175a:	80 7f       	andi	r24, 0xF0	; 240
    175c:	80 25       	eor	r24, r0
    175e:	09 2e       	mov	r0, r25
    1760:	98 2f       	mov	r25, r24
    1762:	82 95       	swap	r24
    1764:	8f 70       	andi	r24, 0x0F	; 15
    1766:	08 26       	eor	r0, r24
    1768:	86 95       	lsr	r24
    176a:	98 27       	eor	r25, r24
    176c:	89 27       	eor	r24, r25
    176e:	88 0f       	add	r24, r24
    1770:	88 0f       	add	r24, r24
    1772:	88 0f       	add	r24, r24
    1774:	80 25       	eor	r24, r0
    1776:	23 81       	ldd	r18, Z+3	; 0x03
    1778:	82 27       	eor	r24, r18
    177a:	08 2e       	mov	r0, r24
    177c:	82 95       	swap	r24
    177e:	80 7f       	andi	r24, 0xF0	; 240
    1780:	80 25       	eor	r24, r0
    1782:	09 2e       	mov	r0, r25
    1784:	98 2f       	mov	r25, r24
    1786:	82 95       	swap	r24
    1788:	8f 70       	andi	r24, 0x0F	; 15
    178a:	08 26       	eor	r0, r24
    178c:	86 95       	lsr	r24
    178e:	98 27       	eor	r25, r24
    1790:	89 27       	eor	r24, r25
    1792:	88 0f       	add	r24, r24
    1794:	88 0f       	add	r24, r24
    1796:	88 0f       	add	r24, r24
    1798:	80 25       	eor	r24, r0
    179a:	24 81       	ldd	r18, Z+4	; 0x04
    179c:	82 27       	eor	r24, r18
    179e:	08 2e       	mov	r0, r24
    17a0:	82 95       	swap	r24
    17a2:	80 7f       	andi	r24, 0xF0	; 240
    17a4:	80 25       	eor	r24, r0
    17a6:	09 2e       	mov	r0, r25
    17a8:	98 2f       	mov	r25, r24
    17aa:	82 95       	swap	r24
    17ac:	8f 70       	andi	r24, 0x0F	; 15
    17ae:	08 26       	eor	r0, r24
    17b0:	86 95       	lsr	r24
    17b2:	98 27       	eor	r25, r24
    17b4:	89 27       	eor	r24, r25
    17b6:	88 0f       	add	r24, r24
    17b8:	88 0f       	add	r24, r24
    17ba:	88 0f       	add	r24, r24
    17bc:	80 25       	eor	r24, r0
    17be:	25 81       	ldd	r18, Z+5	; 0x05
    17c0:	82 27       	eor	r24, r18
    17c2:	08 2e       	mov	r0, r24
    17c4:	82 95       	swap	r24
    17c6:	80 7f       	andi	r24, 0xF0	; 240
    17c8:	80 25       	eor	r24, r0
    17ca:	09 2e       	mov	r0, r25
    17cc:	98 2f       	mov	r25, r24
    17ce:	82 95       	swap	r24
    17d0:	8f 70       	andi	r24, 0x0F	; 15
    17d2:	08 26       	eor	r0, r24
    17d4:	86 95       	lsr	r24
    17d6:	98 27       	eor	r25, r24
    17d8:	89 27       	eor	r24, r25
    17da:	88 0f       	add	r24, r24
    17dc:	88 0f       	add	r24, r24
    17de:	88 0f       	add	r24, r24
    17e0:	80 25       	eor	r24, r0
    17e2:	26 81       	ldd	r18, Z+6	; 0x06
    17e4:	82 27       	eor	r24, r18
    17e6:	08 2e       	mov	r0, r24
    17e8:	82 95       	swap	r24
    17ea:	80 7f       	andi	r24, 0xF0	; 240
    17ec:	80 25       	eor	r24, r0
    17ee:	09 2e       	mov	r0, r25
    17f0:	98 2f       	mov	r25, r24
    17f2:	82 95       	swap	r24
    17f4:	8f 70       	andi	r24, 0x0F	; 15
    17f6:	08 26       	eor	r0, r24
    17f8:	86 95       	lsr	r24
    17fa:	98 27       	eor	r25, r24
    17fc:	89 27       	eor	r24, r25
    17fe:	88 0f       	add	r24, r24
    1800:	88 0f       	add	r24, r24
    1802:	88 0f       	add	r24, r24
    1804:	80 25       	eor	r24, r0
    1806:	27 81       	ldd	r18, Z+7	; 0x07
    1808:	82 27       	eor	r24, r18
    180a:	08 2e       	mov	r0, r24
    180c:	82 95       	swap	r24
    180e:	80 7f       	andi	r24, 0xF0	; 240
    1810:	80 25       	eor	r24, r0
    1812:	09 2e       	mov	r0, r25
    1814:	98 2f       	mov	r25, r24
    1816:	82 95       	swap	r24
    1818:	8f 70       	andi	r24, 0x0F	; 15
    181a:	08 26       	eor	r0, r24
    181c:	86 95       	lsr	r24
    181e:	98 27       	eor	r25, r24
    1820:	89 27       	eor	r24, r25
    1822:	88 0f       	add	r24, r24
    1824:	88 0f       	add	r24, r24
    1826:	88 0f       	add	r24, r24
    1828:	80 25       	eor	r24, r0
    182a:	20 85       	ldd	r18, Z+8	; 0x08
    182c:	82 27       	eor	r24, r18
    182e:	08 2e       	mov	r0, r24
    1830:	82 95       	swap	r24
    1832:	80 7f       	andi	r24, 0xF0	; 240
    1834:	80 25       	eor	r24, r0
    1836:	09 2e       	mov	r0, r25
    1838:	98 2f       	mov	r25, r24
    183a:	82 95       	swap	r24
    183c:	8f 70       	andi	r24, 0x0F	; 15
    183e:	08 26       	eor	r0, r24
    1840:	86 95       	lsr	r24
    1842:	98 27       	eor	r25, r24
    1844:	89 27       	eor	r24, r25
    1846:	88 0f       	add	r24, r24
    1848:	88 0f       	add	r24, r24
    184a:	88 0f       	add	r24, r24
    184c:	80 25       	eor	r24, r0
    184e:	21 85       	ldd	r18, Z+9	; 0x09
    1850:	82 27       	eor	r24, r18
    1852:	08 2e       	mov	r0, r24
    1854:	82 95       	swap	r24
    1856:	80 7f       	andi	r24, 0xF0	; 240
    1858:	80 25       	eor	r24, r0
    185a:	09 2e       	mov	r0, r25
    185c:	98 2f       	mov	r25, r24
    185e:	82 95       	swap	r24
    1860:	8f 70       	andi	r24, 0x0F	; 15
    1862:	08 26       	eor	r0, r24
    1864:	86 95       	lsr	r24
    1866:	98 27       	eor	r25, r24
    1868:	89 27       	eor	r24, r25
    186a:	88 0f       	add	r24, r24
    186c:	88 0f       	add	r24, r24
    186e:	88 0f       	add	r24, r24
    1870:	80 25       	eor	r24, r0
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    1872:	08 95       	ret

00001874 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    1874:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    1876:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    1878:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    187a:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <tx_mask>
    or tmpreg1, ddrreg
    187e:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    1880:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    1882:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1884:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <tx_mask>
    1888:	20 30       	cpi	r18, 0x00	; 0
    188a:	29 f0       	breq	.+10     	; 0x1896 <message_send+0x22>
    188c:	00 00       	nop
    188e:	25 b1       	in	r18, 0x05	; 5
    1890:	23 2b       	or	r18, r19
    1892:	25 b9       	out	0x05, r18	; 5
    1894:	04 c0       	rjmp	.+8      	; 0x189e <message_send+0x2a>
    1896:	00 00       	nop
    1898:	00 00       	nop
    189a:	00 00       	nop
    189c:	00 c0       	rjmp	.+0      	; 0x189e <message_send+0x2a>
    189e:	00 00       	nop
    18a0:	00 00       	nop
    18a2:	00 00       	nop
    18a4:	30 95       	com	r19
    18a6:	25 b1       	in	r18, 0x05	; 5
    18a8:	23 23       	and	r18, r19
    18aa:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    18ac:	2e ea       	ldi	r18, 0xAE	; 174
    18ae:	2a 95       	dec	r18
    18b0:	f1 f7       	brne	.-4      	; 0x18ae <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    18b2:	2b ee       	ldi	r18, 0xEB	; 235

000018b4 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    18b4:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    18b6:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    18b8:	0a c0       	rjmp	.+20     	; 0x18ce <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    18ba:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    18bc:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <tx_mask>
    com tmpreg2
    18c0:	30 95       	com	r19
    in tmpreg1, IR_PORT
    18c2:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    18c4:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    18c6:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    18c8:	0f be       	out	0x3f, r0	; 63
    return 0
    18ca:	80 e0       	ldi	r24, 0x00	; 0
    18cc:	08 95       	ret

000018ce <nocollision>:
nocollision:
    nop
    18ce:	00 00       	nop
    dec tmpreg1
    18d0:	2a 95       	dec	r18
    brne checkcollision
    18d2:	81 f7       	brne	.-32     	; 0x18b4 <checkcollision>

    ldi tmpreg1, 0x01
    18d4:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    18d6:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <tx_mask>
    18da:	20 30       	cpi	r18, 0x00	; 0
    18dc:	29 f0       	breq	.+10     	; 0x18e8 <nocollision+0x1a>
    18de:	00 00       	nop
    18e0:	25 b1       	in	r18, 0x05	; 5
    18e2:	23 2b       	or	r18, r19
    18e4:	25 b9       	out	0x05, r18	; 5
    18e6:	04 c0       	rjmp	.+8      	; 0x18f0 <nocollision+0x22>
    18e8:	00 00       	nop
    18ea:	00 00       	nop
    18ec:	00 00       	nop
    18ee:	00 c0       	rjmp	.+0      	; 0x18f0 <nocollision+0x22>
    18f0:	00 00       	nop
    18f2:	00 00       	nop
    18f4:	00 00       	nop
    18f6:	30 95       	com	r19
    18f8:	25 b1       	in	r18, 0x05	; 5
    18fa:	23 23       	and	r18, r19
    18fc:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    18fe:	00 00       	nop
    1900:	24 e5       	ldi	r18, 0x54	; 84
    1902:	2a 95       	dec	r18
    1904:	f1 f7       	brne	.-4      	; 0x1902 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    1906:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    1908:	8c e0       	ldi	r24, 0x0C	; 12

0000190a <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    190a:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    190c:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    190e:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    1910:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    1912:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    1914:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    1916:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    1918:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    191a:	50 e0       	ldi	r21, 0x00	; 0

0000191c <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    191c:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    191e:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    1920:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    1922:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    1924:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <tx_mask>
    1928:	20 30       	cpi	r18, 0x00	; 0
    192a:	29 f0       	breq	.+10     	; 0x1936 <sendbit+0x1a>
    192c:	00 00       	nop
    192e:	25 b1       	in	r18, 0x05	; 5
    1930:	23 2b       	or	r18, r19
    1932:	25 b9       	out	0x05, r18	; 5
    1934:	04 c0       	rjmp	.+8      	; 0x193e <sendbit+0x22>
    1936:	00 00       	nop
    1938:	00 00       	nop
    193a:	00 00       	nop
    193c:	00 c0       	rjmp	.+0      	; 0x193e <sendbit+0x22>
    193e:	00 00       	nop
    1940:	00 00       	nop
    1942:	00 00       	nop
    1944:	30 95       	com	r19
    1946:	25 b1       	in	r18, 0x05	; 5
    1948:	23 23       	and	r18, r19
    194a:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    194c:	00 00       	nop
    194e:	21 e5       	ldi	r18, 0x51	; 81
    1950:	2a 95       	dec	r18
    1952:	f1 f7       	brne	.-4      	; 0x1950 <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    1954:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    1956:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    1958:	9a 95       	dec	r25
    brne sendbit
    195a:	01 f7       	brne	.-64     	; 0x191c <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    195c:	8a 95       	dec	r24
    brne sendbyte
    195e:	a9 f6       	brne	.-86     	; 0x190a <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    1960:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    1962:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    1964:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1966:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1968:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <tx_mask>
    com tmpreg2
    196c:	30 95       	com	r19
    in tmpreg1, IR_PORT
    196e:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1970:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1972:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1974:	0f be       	out	0x3f, r0	; 63
    return 1
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	08 95       	ret

0000197a <main>:

int main() {
    // initialize hardware
    kilo_init();
    197a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <kilo_init>
    kilo_message_tx = message_tx;
    197e:	87 e6       	ldi	r24, 0x67	; 103
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <kilo_message_tx+0x1>
    1986:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <kilo_message_tx>
    kilo_message_rx = message_rx;
    198a:	8f e5       	ldi	r24, 0x5F	; 95
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <kilo_message_rx+0x1>
    1992:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <kilo_message_rx>
    kilo_start(setup, loop);
    1996:	64 e9       	ldi	r22, 0x94	; 148
    1998:	70 e0       	ldi	r23, 0x00	; 0
    199a:	8a e6       	ldi	r24, 0x6A	; 106
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <kilo_start>

    return 0;
}
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	80 e0       	ldi	r24, 0x00	; 0
    19a6:	08 95       	ret

000019a8 <__divmodhi4>:
    19a8:	97 fb       	bst	r25, 7
    19aa:	07 2e       	mov	r0, r23
    19ac:	16 f4       	brtc	.+4      	; 0x19b2 <__divmodhi4+0xa>
    19ae:	00 94       	com	r0
    19b0:	07 d0       	rcall	.+14     	; 0x19c0 <__divmodhi4_neg1>
    19b2:	77 fd       	sbrc	r23, 7
    19b4:	09 d0       	rcall	.+18     	; 0x19c8 <__divmodhi4_neg2>
    19b6:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <__udivmodhi4>
    19ba:	07 fc       	sbrc	r0, 7
    19bc:	05 d0       	rcall	.+10     	; 0x19c8 <__divmodhi4_neg2>
    19be:	3e f4       	brtc	.+14     	; 0x19ce <__divmodhi4_exit>

000019c0 <__divmodhi4_neg1>:
    19c0:	90 95       	com	r25
    19c2:	81 95       	neg	r24
    19c4:	9f 4f       	sbci	r25, 0xFF	; 255
    19c6:	08 95       	ret

000019c8 <__divmodhi4_neg2>:
    19c8:	70 95       	com	r23
    19ca:	61 95       	neg	r22
    19cc:	7f 4f       	sbci	r23, 0xFF	; 255

000019ce <__divmodhi4_exit>:
    19ce:	08 95       	ret

000019d0 <__tablejump2__>:
    19d0:	ee 0f       	add	r30, r30
    19d2:	ff 1f       	adc	r31, r31
    19d4:	05 90       	lpm	r0, Z+
    19d6:	f4 91       	lpm	r31, Z
    19d8:	e0 2d       	mov	r30, r0
    19da:	09 94       	ijmp

000019dc <__umulhisi3>:
    19dc:	a2 9f       	mul	r26, r18
    19de:	b0 01       	movw	r22, r0
    19e0:	b3 9f       	mul	r27, r19
    19e2:	c0 01       	movw	r24, r0
    19e4:	a3 9f       	mul	r26, r19
    19e6:	70 0d       	add	r23, r0
    19e8:	81 1d       	adc	r24, r1
    19ea:	11 24       	eor	r1, r1
    19ec:	91 1d       	adc	r25, r1
    19ee:	b2 9f       	mul	r27, r18
    19f0:	70 0d       	add	r23, r0
    19f2:	81 1d       	adc	r24, r1
    19f4:	11 24       	eor	r1, r1
    19f6:	91 1d       	adc	r25, r1
    19f8:	08 95       	ret

000019fa <__udivmodhi4>:
    19fa:	aa 1b       	sub	r26, r26
    19fc:	bb 1b       	sub	r27, r27
    19fe:	51 e1       	ldi	r21, 0x11	; 17
    1a00:	07 c0       	rjmp	.+14     	; 0x1a10 <__udivmodhi4_ep>

00001a02 <__udivmodhi4_loop>:
    1a02:	aa 1f       	adc	r26, r26
    1a04:	bb 1f       	adc	r27, r27
    1a06:	a6 17       	cp	r26, r22
    1a08:	b7 07       	cpc	r27, r23
    1a0a:	10 f0       	brcs	.+4      	; 0x1a10 <__udivmodhi4_ep>
    1a0c:	a6 1b       	sub	r26, r22
    1a0e:	b7 0b       	sbc	r27, r23

00001a10 <__udivmodhi4_ep>:
    1a10:	88 1f       	adc	r24, r24
    1a12:	99 1f       	adc	r25, r25
    1a14:	5a 95       	dec	r21
    1a16:	a9 f7       	brne	.-22     	; 0x1a02 <__udivmodhi4_loop>
    1a18:	80 95       	com	r24
    1a1a:	90 95       	com	r25
    1a1c:	bc 01       	movw	r22, r24
    1a1e:	cd 01       	movw	r24, r26
    1a20:	08 95       	ret

00001a22 <__subsf3>:
    1a22:	50 58       	subi	r21, 0x80	; 128

00001a24 <__addsf3>:
    1a24:	bb 27       	eor	r27, r27
    1a26:	aa 27       	eor	r26, r26
    1a28:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <__addsf3x>
    1a2c:	0c 94 7a 0e 	jmp	0x1cf4	; 0x1cf4 <__fp_round>
    1a30:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <__fp_pscA>
    1a34:	38 f0       	brcs	.+14     	; 0x1a44 <__addsf3+0x20>
    1a36:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__fp_pscB>
    1a3a:	20 f0       	brcs	.+8      	; 0x1a44 <__addsf3+0x20>
    1a3c:	39 f4       	brne	.+14     	; 0x1a4c <__addsf3+0x28>
    1a3e:	9f 3f       	cpi	r25, 0xFF	; 255
    1a40:	19 f4       	brne	.+6      	; 0x1a48 <__addsf3+0x24>
    1a42:	26 f4       	brtc	.+8      	; 0x1a4c <__addsf3+0x28>
    1a44:	0c 94 69 0e 	jmp	0x1cd2	; 0x1cd2 <__fp_nan>
    1a48:	0e f4       	brtc	.+2      	; 0x1a4c <__addsf3+0x28>
    1a4a:	e0 95       	com	r30
    1a4c:	e7 fb       	bst	r30, 7
    1a4e:	0c 94 63 0e 	jmp	0x1cc6	; 0x1cc6 <__fp_inf>

00001a52 <__addsf3x>:
    1a52:	e9 2f       	mov	r30, r25
    1a54:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <__fp_split3>
    1a58:	58 f3       	brcs	.-42     	; 0x1a30 <__addsf3+0xc>
    1a5a:	ba 17       	cp	r27, r26
    1a5c:	62 07       	cpc	r22, r18
    1a5e:	73 07       	cpc	r23, r19
    1a60:	84 07       	cpc	r24, r20
    1a62:	95 07       	cpc	r25, r21
    1a64:	20 f0       	brcs	.+8      	; 0x1a6e <__addsf3x+0x1c>
    1a66:	79 f4       	brne	.+30     	; 0x1a86 <__addsf3x+0x34>
    1a68:	a6 f5       	brtc	.+104    	; 0x1ad2 <__addsf3x+0x80>
    1a6a:	0c 94 ad 0e 	jmp	0x1d5a	; 0x1d5a <__fp_zero>
    1a6e:	0e f4       	brtc	.+2      	; 0x1a72 <__addsf3x+0x20>
    1a70:	e0 95       	com	r30
    1a72:	0b 2e       	mov	r0, r27
    1a74:	ba 2f       	mov	r27, r26
    1a76:	a0 2d       	mov	r26, r0
    1a78:	0b 01       	movw	r0, r22
    1a7a:	b9 01       	movw	r22, r18
    1a7c:	90 01       	movw	r18, r0
    1a7e:	0c 01       	movw	r0, r24
    1a80:	ca 01       	movw	r24, r20
    1a82:	a0 01       	movw	r20, r0
    1a84:	11 24       	eor	r1, r1
    1a86:	ff 27       	eor	r31, r31
    1a88:	59 1b       	sub	r21, r25
    1a8a:	99 f0       	breq	.+38     	; 0x1ab2 <__addsf3x+0x60>
    1a8c:	59 3f       	cpi	r21, 0xF9	; 249
    1a8e:	50 f4       	brcc	.+20     	; 0x1aa4 <__addsf3x+0x52>
    1a90:	50 3e       	cpi	r21, 0xE0	; 224
    1a92:	68 f1       	brcs	.+90     	; 0x1aee <__addsf3x+0x9c>
    1a94:	1a 16       	cp	r1, r26
    1a96:	f0 40       	sbci	r31, 0x00	; 0
    1a98:	a2 2f       	mov	r26, r18
    1a9a:	23 2f       	mov	r18, r19
    1a9c:	34 2f       	mov	r19, r20
    1a9e:	44 27       	eor	r20, r20
    1aa0:	58 5f       	subi	r21, 0xF8	; 248
    1aa2:	f3 cf       	rjmp	.-26     	; 0x1a8a <__addsf3x+0x38>
    1aa4:	46 95       	lsr	r20
    1aa6:	37 95       	ror	r19
    1aa8:	27 95       	ror	r18
    1aaa:	a7 95       	ror	r26
    1aac:	f0 40       	sbci	r31, 0x00	; 0
    1aae:	53 95       	inc	r21
    1ab0:	c9 f7       	brne	.-14     	; 0x1aa4 <__addsf3x+0x52>
    1ab2:	7e f4       	brtc	.+30     	; 0x1ad2 <__addsf3x+0x80>
    1ab4:	1f 16       	cp	r1, r31
    1ab6:	ba 0b       	sbc	r27, r26
    1ab8:	62 0b       	sbc	r22, r18
    1aba:	73 0b       	sbc	r23, r19
    1abc:	84 0b       	sbc	r24, r20
    1abe:	ba f0       	brmi	.+46     	; 0x1aee <__addsf3x+0x9c>
    1ac0:	91 50       	subi	r25, 0x01	; 1
    1ac2:	a1 f0       	breq	.+40     	; 0x1aec <__addsf3x+0x9a>
    1ac4:	ff 0f       	add	r31, r31
    1ac6:	bb 1f       	adc	r27, r27
    1ac8:	66 1f       	adc	r22, r22
    1aca:	77 1f       	adc	r23, r23
    1acc:	88 1f       	adc	r24, r24
    1ace:	c2 f7       	brpl	.-16     	; 0x1ac0 <__addsf3x+0x6e>
    1ad0:	0e c0       	rjmp	.+28     	; 0x1aee <__addsf3x+0x9c>
    1ad2:	ba 0f       	add	r27, r26
    1ad4:	62 1f       	adc	r22, r18
    1ad6:	73 1f       	adc	r23, r19
    1ad8:	84 1f       	adc	r24, r20
    1ada:	48 f4       	brcc	.+18     	; 0x1aee <__addsf3x+0x9c>
    1adc:	87 95       	ror	r24
    1ade:	77 95       	ror	r23
    1ae0:	67 95       	ror	r22
    1ae2:	b7 95       	ror	r27
    1ae4:	f7 95       	ror	r31
    1ae6:	9e 3f       	cpi	r25, 0xFE	; 254
    1ae8:	08 f0       	brcs	.+2      	; 0x1aec <__addsf3x+0x9a>
    1aea:	b0 cf       	rjmp	.-160    	; 0x1a4c <__addsf3+0x28>
    1aec:	93 95       	inc	r25
    1aee:	88 0f       	add	r24, r24
    1af0:	08 f0       	brcs	.+2      	; 0x1af4 <__addsf3x+0xa2>
    1af2:	99 27       	eor	r25, r25
    1af4:	ee 0f       	add	r30, r30
    1af6:	97 95       	ror	r25
    1af8:	87 95       	ror	r24
    1afa:	08 95       	ret

00001afc <__divsf3>:
    1afc:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <__divsf3x>
    1b00:	0c 94 7a 0e 	jmp	0x1cf4	; 0x1cf4 <__fp_round>
    1b04:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__fp_pscB>
    1b08:	58 f0       	brcs	.+22     	; 0x1b20 <__divsf3+0x24>
    1b0a:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <__fp_pscA>
    1b0e:	40 f0       	brcs	.+16     	; 0x1b20 <__divsf3+0x24>
    1b10:	29 f4       	brne	.+10     	; 0x1b1c <__divsf3+0x20>
    1b12:	5f 3f       	cpi	r21, 0xFF	; 255
    1b14:	29 f0       	breq	.+10     	; 0x1b20 <__divsf3+0x24>
    1b16:	0c 94 63 0e 	jmp	0x1cc6	; 0x1cc6 <__fp_inf>
    1b1a:	51 11       	cpse	r21, r1
    1b1c:	0c 94 ae 0e 	jmp	0x1d5c	; 0x1d5c <__fp_szero>
    1b20:	0c 94 69 0e 	jmp	0x1cd2	; 0x1cd2 <__fp_nan>

00001b24 <__divsf3x>:
    1b24:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <__fp_split3>
    1b28:	68 f3       	brcs	.-38     	; 0x1b04 <__divsf3+0x8>

00001b2a <__divsf3_pse>:
    1b2a:	99 23       	and	r25, r25
    1b2c:	b1 f3       	breq	.-20     	; 0x1b1a <__divsf3+0x1e>
    1b2e:	55 23       	and	r21, r21
    1b30:	91 f3       	breq	.-28     	; 0x1b16 <__divsf3+0x1a>
    1b32:	95 1b       	sub	r25, r21
    1b34:	55 0b       	sbc	r21, r21
    1b36:	bb 27       	eor	r27, r27
    1b38:	aa 27       	eor	r26, r26
    1b3a:	62 17       	cp	r22, r18
    1b3c:	73 07       	cpc	r23, r19
    1b3e:	84 07       	cpc	r24, r20
    1b40:	38 f0       	brcs	.+14     	; 0x1b50 <__divsf3_pse+0x26>
    1b42:	9f 5f       	subi	r25, 0xFF	; 255
    1b44:	5f 4f       	sbci	r21, 0xFF	; 255
    1b46:	22 0f       	add	r18, r18
    1b48:	33 1f       	adc	r19, r19
    1b4a:	44 1f       	adc	r20, r20
    1b4c:	aa 1f       	adc	r26, r26
    1b4e:	a9 f3       	breq	.-22     	; 0x1b3a <__divsf3_pse+0x10>
    1b50:	35 d0       	rcall	.+106    	; 0x1bbc <__divsf3_pse+0x92>
    1b52:	0e 2e       	mov	r0, r30
    1b54:	3a f0       	brmi	.+14     	; 0x1b64 <__divsf3_pse+0x3a>
    1b56:	e0 e8       	ldi	r30, 0x80	; 128
    1b58:	32 d0       	rcall	.+100    	; 0x1bbe <__divsf3_pse+0x94>
    1b5a:	91 50       	subi	r25, 0x01	; 1
    1b5c:	50 40       	sbci	r21, 0x00	; 0
    1b5e:	e6 95       	lsr	r30
    1b60:	00 1c       	adc	r0, r0
    1b62:	ca f7       	brpl	.-14     	; 0x1b56 <__divsf3_pse+0x2c>
    1b64:	2b d0       	rcall	.+86     	; 0x1bbc <__divsf3_pse+0x92>
    1b66:	fe 2f       	mov	r31, r30
    1b68:	29 d0       	rcall	.+82     	; 0x1bbc <__divsf3_pse+0x92>
    1b6a:	66 0f       	add	r22, r22
    1b6c:	77 1f       	adc	r23, r23
    1b6e:	88 1f       	adc	r24, r24
    1b70:	bb 1f       	adc	r27, r27
    1b72:	26 17       	cp	r18, r22
    1b74:	37 07       	cpc	r19, r23
    1b76:	48 07       	cpc	r20, r24
    1b78:	ab 07       	cpc	r26, r27
    1b7a:	b0 e8       	ldi	r27, 0x80	; 128
    1b7c:	09 f0       	breq	.+2      	; 0x1b80 <__divsf3_pse+0x56>
    1b7e:	bb 0b       	sbc	r27, r27
    1b80:	80 2d       	mov	r24, r0
    1b82:	bf 01       	movw	r22, r30
    1b84:	ff 27       	eor	r31, r31
    1b86:	93 58       	subi	r25, 0x83	; 131
    1b88:	5f 4f       	sbci	r21, 0xFF	; 255
    1b8a:	3a f0       	brmi	.+14     	; 0x1b9a <__divsf3_pse+0x70>
    1b8c:	9e 3f       	cpi	r25, 0xFE	; 254
    1b8e:	51 05       	cpc	r21, r1
    1b90:	78 f0       	brcs	.+30     	; 0x1bb0 <__divsf3_pse+0x86>
    1b92:	0c 94 63 0e 	jmp	0x1cc6	; 0x1cc6 <__fp_inf>
    1b96:	0c 94 ae 0e 	jmp	0x1d5c	; 0x1d5c <__fp_szero>
    1b9a:	5f 3f       	cpi	r21, 0xFF	; 255
    1b9c:	e4 f3       	brlt	.-8      	; 0x1b96 <__divsf3_pse+0x6c>
    1b9e:	98 3e       	cpi	r25, 0xE8	; 232
    1ba0:	d4 f3       	brlt	.-12     	; 0x1b96 <__divsf3_pse+0x6c>
    1ba2:	86 95       	lsr	r24
    1ba4:	77 95       	ror	r23
    1ba6:	67 95       	ror	r22
    1ba8:	b7 95       	ror	r27
    1baa:	f7 95       	ror	r31
    1bac:	9f 5f       	subi	r25, 0xFF	; 255
    1bae:	c9 f7       	brne	.-14     	; 0x1ba2 <__divsf3_pse+0x78>
    1bb0:	88 0f       	add	r24, r24
    1bb2:	91 1d       	adc	r25, r1
    1bb4:	96 95       	lsr	r25
    1bb6:	87 95       	ror	r24
    1bb8:	97 f9       	bld	r25, 7
    1bba:	08 95       	ret
    1bbc:	e1 e0       	ldi	r30, 0x01	; 1
    1bbe:	66 0f       	add	r22, r22
    1bc0:	77 1f       	adc	r23, r23
    1bc2:	88 1f       	adc	r24, r24
    1bc4:	bb 1f       	adc	r27, r27
    1bc6:	62 17       	cp	r22, r18
    1bc8:	73 07       	cpc	r23, r19
    1bca:	84 07       	cpc	r24, r20
    1bcc:	ba 07       	cpc	r27, r26
    1bce:	20 f0       	brcs	.+8      	; 0x1bd8 <__divsf3_pse+0xae>
    1bd0:	62 1b       	sub	r22, r18
    1bd2:	73 0b       	sbc	r23, r19
    1bd4:	84 0b       	sbc	r24, r20
    1bd6:	ba 0b       	sbc	r27, r26
    1bd8:	ee 1f       	adc	r30, r30
    1bda:	88 f7       	brcc	.-30     	; 0x1bbe <__divsf3_pse+0x94>
    1bdc:	e0 95       	com	r30
    1bde:	08 95       	ret

00001be0 <__fixsfsi>:
    1be0:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <__fixunssfsi>
    1be4:	68 94       	set
    1be6:	b1 11       	cpse	r27, r1
    1be8:	0c 94 ae 0e 	jmp	0x1d5c	; 0x1d5c <__fp_szero>
    1bec:	08 95       	ret

00001bee <__fixunssfsi>:
    1bee:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <__fp_splitA>
    1bf2:	88 f0       	brcs	.+34     	; 0x1c16 <__fixunssfsi+0x28>
    1bf4:	9f 57       	subi	r25, 0x7F	; 127
    1bf6:	98 f0       	brcs	.+38     	; 0x1c1e <__fixunssfsi+0x30>
    1bf8:	b9 2f       	mov	r27, r25
    1bfa:	99 27       	eor	r25, r25
    1bfc:	b7 51       	subi	r27, 0x17	; 23
    1bfe:	b0 f0       	brcs	.+44     	; 0x1c2c <__fixunssfsi+0x3e>
    1c00:	e1 f0       	breq	.+56     	; 0x1c3a <__fixunssfsi+0x4c>
    1c02:	66 0f       	add	r22, r22
    1c04:	77 1f       	adc	r23, r23
    1c06:	88 1f       	adc	r24, r24
    1c08:	99 1f       	adc	r25, r25
    1c0a:	1a f0       	brmi	.+6      	; 0x1c12 <__fixunssfsi+0x24>
    1c0c:	ba 95       	dec	r27
    1c0e:	c9 f7       	brne	.-14     	; 0x1c02 <__fixunssfsi+0x14>
    1c10:	14 c0       	rjmp	.+40     	; 0x1c3a <__fixunssfsi+0x4c>
    1c12:	b1 30       	cpi	r27, 0x01	; 1
    1c14:	91 f0       	breq	.+36     	; 0x1c3a <__fixunssfsi+0x4c>
    1c16:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <__fp_zero>
    1c1a:	b1 e0       	ldi	r27, 0x01	; 1
    1c1c:	08 95       	ret
    1c1e:	0c 94 ad 0e 	jmp	0x1d5a	; 0x1d5a <__fp_zero>
    1c22:	67 2f       	mov	r22, r23
    1c24:	78 2f       	mov	r23, r24
    1c26:	88 27       	eor	r24, r24
    1c28:	b8 5f       	subi	r27, 0xF8	; 248
    1c2a:	39 f0       	breq	.+14     	; 0x1c3a <__fixunssfsi+0x4c>
    1c2c:	b9 3f       	cpi	r27, 0xF9	; 249
    1c2e:	cc f3       	brlt	.-14     	; 0x1c22 <__fixunssfsi+0x34>
    1c30:	86 95       	lsr	r24
    1c32:	77 95       	ror	r23
    1c34:	67 95       	ror	r22
    1c36:	b3 95       	inc	r27
    1c38:	d9 f7       	brne	.-10     	; 0x1c30 <__fixunssfsi+0x42>
    1c3a:	3e f4       	brtc	.+14     	; 0x1c4a <__fixunssfsi+0x5c>
    1c3c:	90 95       	com	r25
    1c3e:	80 95       	com	r24
    1c40:	70 95       	com	r23
    1c42:	61 95       	neg	r22
    1c44:	7f 4f       	sbci	r23, 0xFF	; 255
    1c46:	8f 4f       	sbci	r24, 0xFF	; 255
    1c48:	9f 4f       	sbci	r25, 0xFF	; 255
    1c4a:	08 95       	ret

00001c4c <__floatunsisf>:
    1c4c:	e8 94       	clt
    1c4e:	09 c0       	rjmp	.+18     	; 0x1c62 <__floatsisf+0x12>

00001c50 <__floatsisf>:
    1c50:	97 fb       	bst	r25, 7
    1c52:	3e f4       	brtc	.+14     	; 0x1c62 <__floatsisf+0x12>
    1c54:	90 95       	com	r25
    1c56:	80 95       	com	r24
    1c58:	70 95       	com	r23
    1c5a:	61 95       	neg	r22
    1c5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c5e:	8f 4f       	sbci	r24, 0xFF	; 255
    1c60:	9f 4f       	sbci	r25, 0xFF	; 255
    1c62:	99 23       	and	r25, r25
    1c64:	a9 f0       	breq	.+42     	; 0x1c90 <__floatsisf+0x40>
    1c66:	f9 2f       	mov	r31, r25
    1c68:	96 e9       	ldi	r25, 0x96	; 150
    1c6a:	bb 27       	eor	r27, r27
    1c6c:	93 95       	inc	r25
    1c6e:	f6 95       	lsr	r31
    1c70:	87 95       	ror	r24
    1c72:	77 95       	ror	r23
    1c74:	67 95       	ror	r22
    1c76:	b7 95       	ror	r27
    1c78:	f1 11       	cpse	r31, r1
    1c7a:	f8 cf       	rjmp	.-16     	; 0x1c6c <__floatsisf+0x1c>
    1c7c:	fa f4       	brpl	.+62     	; 0x1cbc <__floatsisf+0x6c>
    1c7e:	bb 0f       	add	r27, r27
    1c80:	11 f4       	brne	.+4      	; 0x1c86 <__floatsisf+0x36>
    1c82:	60 ff       	sbrs	r22, 0
    1c84:	1b c0       	rjmp	.+54     	; 0x1cbc <__floatsisf+0x6c>
    1c86:	6f 5f       	subi	r22, 0xFF	; 255
    1c88:	7f 4f       	sbci	r23, 0xFF	; 255
    1c8a:	8f 4f       	sbci	r24, 0xFF	; 255
    1c8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c8e:	16 c0       	rjmp	.+44     	; 0x1cbc <__floatsisf+0x6c>
    1c90:	88 23       	and	r24, r24
    1c92:	11 f0       	breq	.+4      	; 0x1c98 <__floatsisf+0x48>
    1c94:	96 e9       	ldi	r25, 0x96	; 150
    1c96:	11 c0       	rjmp	.+34     	; 0x1cba <__floatsisf+0x6a>
    1c98:	77 23       	and	r23, r23
    1c9a:	21 f0       	breq	.+8      	; 0x1ca4 <__floatsisf+0x54>
    1c9c:	9e e8       	ldi	r25, 0x8E	; 142
    1c9e:	87 2f       	mov	r24, r23
    1ca0:	76 2f       	mov	r23, r22
    1ca2:	05 c0       	rjmp	.+10     	; 0x1cae <__floatsisf+0x5e>
    1ca4:	66 23       	and	r22, r22
    1ca6:	71 f0       	breq	.+28     	; 0x1cc4 <__floatsisf+0x74>
    1ca8:	96 e8       	ldi	r25, 0x86	; 134
    1caa:	86 2f       	mov	r24, r22
    1cac:	70 e0       	ldi	r23, 0x00	; 0
    1cae:	60 e0       	ldi	r22, 0x00	; 0
    1cb0:	2a f0       	brmi	.+10     	; 0x1cbc <__floatsisf+0x6c>
    1cb2:	9a 95       	dec	r25
    1cb4:	66 0f       	add	r22, r22
    1cb6:	77 1f       	adc	r23, r23
    1cb8:	88 1f       	adc	r24, r24
    1cba:	da f7       	brpl	.-10     	; 0x1cb2 <__floatsisf+0x62>
    1cbc:	88 0f       	add	r24, r24
    1cbe:	96 95       	lsr	r25
    1cc0:	87 95       	ror	r24
    1cc2:	97 f9       	bld	r25, 7
    1cc4:	08 95       	ret

00001cc6 <__fp_inf>:
    1cc6:	97 f9       	bld	r25, 7
    1cc8:	9f 67       	ori	r25, 0x7F	; 127
    1cca:	80 e8       	ldi	r24, 0x80	; 128
    1ccc:	70 e0       	ldi	r23, 0x00	; 0
    1cce:	60 e0       	ldi	r22, 0x00	; 0
    1cd0:	08 95       	ret

00001cd2 <__fp_nan>:
    1cd2:	9f ef       	ldi	r25, 0xFF	; 255
    1cd4:	80 ec       	ldi	r24, 0xC0	; 192
    1cd6:	08 95       	ret

00001cd8 <__fp_pscA>:
    1cd8:	00 24       	eor	r0, r0
    1cda:	0a 94       	dec	r0
    1cdc:	16 16       	cp	r1, r22
    1cde:	17 06       	cpc	r1, r23
    1ce0:	18 06       	cpc	r1, r24
    1ce2:	09 06       	cpc	r0, r25
    1ce4:	08 95       	ret

00001ce6 <__fp_pscB>:
    1ce6:	00 24       	eor	r0, r0
    1ce8:	0a 94       	dec	r0
    1cea:	12 16       	cp	r1, r18
    1cec:	13 06       	cpc	r1, r19
    1cee:	14 06       	cpc	r1, r20
    1cf0:	05 06       	cpc	r0, r21
    1cf2:	08 95       	ret

00001cf4 <__fp_round>:
    1cf4:	09 2e       	mov	r0, r25
    1cf6:	03 94       	inc	r0
    1cf8:	00 0c       	add	r0, r0
    1cfa:	11 f4       	brne	.+4      	; 0x1d00 <__fp_round+0xc>
    1cfc:	88 23       	and	r24, r24
    1cfe:	52 f0       	brmi	.+20     	; 0x1d14 <__fp_round+0x20>
    1d00:	bb 0f       	add	r27, r27
    1d02:	40 f4       	brcc	.+16     	; 0x1d14 <__fp_round+0x20>
    1d04:	bf 2b       	or	r27, r31
    1d06:	11 f4       	brne	.+4      	; 0x1d0c <__fp_round+0x18>
    1d08:	60 ff       	sbrs	r22, 0
    1d0a:	04 c0       	rjmp	.+8      	; 0x1d14 <__fp_round+0x20>
    1d0c:	6f 5f       	subi	r22, 0xFF	; 255
    1d0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d10:	8f 4f       	sbci	r24, 0xFF	; 255
    1d12:	9f 4f       	sbci	r25, 0xFF	; 255
    1d14:	08 95       	ret

00001d16 <__fp_split3>:
    1d16:	57 fd       	sbrc	r21, 7
    1d18:	90 58       	subi	r25, 0x80	; 128
    1d1a:	44 0f       	add	r20, r20
    1d1c:	55 1f       	adc	r21, r21
    1d1e:	59 f0       	breq	.+22     	; 0x1d36 <__fp_splitA+0x10>
    1d20:	5f 3f       	cpi	r21, 0xFF	; 255
    1d22:	71 f0       	breq	.+28     	; 0x1d40 <__fp_splitA+0x1a>
    1d24:	47 95       	ror	r20

00001d26 <__fp_splitA>:
    1d26:	88 0f       	add	r24, r24
    1d28:	97 fb       	bst	r25, 7
    1d2a:	99 1f       	adc	r25, r25
    1d2c:	61 f0       	breq	.+24     	; 0x1d46 <__fp_splitA+0x20>
    1d2e:	9f 3f       	cpi	r25, 0xFF	; 255
    1d30:	79 f0       	breq	.+30     	; 0x1d50 <__fp_splitA+0x2a>
    1d32:	87 95       	ror	r24
    1d34:	08 95       	ret
    1d36:	12 16       	cp	r1, r18
    1d38:	13 06       	cpc	r1, r19
    1d3a:	14 06       	cpc	r1, r20
    1d3c:	55 1f       	adc	r21, r21
    1d3e:	f2 cf       	rjmp	.-28     	; 0x1d24 <__fp_split3+0xe>
    1d40:	46 95       	lsr	r20
    1d42:	f1 df       	rcall	.-30     	; 0x1d26 <__fp_splitA>
    1d44:	08 c0       	rjmp	.+16     	; 0x1d56 <__fp_splitA+0x30>
    1d46:	16 16       	cp	r1, r22
    1d48:	17 06       	cpc	r1, r23
    1d4a:	18 06       	cpc	r1, r24
    1d4c:	99 1f       	adc	r25, r25
    1d4e:	f1 cf       	rjmp	.-30     	; 0x1d32 <__fp_splitA+0xc>
    1d50:	86 95       	lsr	r24
    1d52:	71 05       	cpc	r23, r1
    1d54:	61 05       	cpc	r22, r1
    1d56:	08 94       	sec
    1d58:	08 95       	ret

00001d5a <__fp_zero>:
    1d5a:	e8 94       	clt

00001d5c <__fp_szero>:
    1d5c:	bb 27       	eor	r27, r27
    1d5e:	66 27       	eor	r22, r22
    1d60:	77 27       	eor	r23, r23
    1d62:	cb 01       	movw	r24, r22
    1d64:	97 f9       	bld	r25, 7
    1d66:	08 95       	ret

00001d68 <__mulsf3>:
    1d68:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <__mulsf3x>
    1d6c:	0c 94 7a 0e 	jmp	0x1cf4	; 0x1cf4 <__fp_round>
    1d70:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <__fp_pscA>
    1d74:	38 f0       	brcs	.+14     	; 0x1d84 <__mulsf3+0x1c>
    1d76:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__fp_pscB>
    1d7a:	20 f0       	brcs	.+8      	; 0x1d84 <__mulsf3+0x1c>
    1d7c:	95 23       	and	r25, r21
    1d7e:	11 f0       	breq	.+4      	; 0x1d84 <__mulsf3+0x1c>
    1d80:	0c 94 63 0e 	jmp	0x1cc6	; 0x1cc6 <__fp_inf>
    1d84:	0c 94 69 0e 	jmp	0x1cd2	; 0x1cd2 <__fp_nan>
    1d88:	11 24       	eor	r1, r1
    1d8a:	0c 94 ae 0e 	jmp	0x1d5c	; 0x1d5c <__fp_szero>

00001d8e <__mulsf3x>:
    1d8e:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <__fp_split3>
    1d92:	70 f3       	brcs	.-36     	; 0x1d70 <__mulsf3+0x8>

00001d94 <__mulsf3_pse>:
    1d94:	95 9f       	mul	r25, r21
    1d96:	c1 f3       	breq	.-16     	; 0x1d88 <__mulsf3+0x20>
    1d98:	95 0f       	add	r25, r21
    1d9a:	50 e0       	ldi	r21, 0x00	; 0
    1d9c:	55 1f       	adc	r21, r21
    1d9e:	62 9f       	mul	r22, r18
    1da0:	f0 01       	movw	r30, r0
    1da2:	72 9f       	mul	r23, r18
    1da4:	bb 27       	eor	r27, r27
    1da6:	f0 0d       	add	r31, r0
    1da8:	b1 1d       	adc	r27, r1
    1daa:	63 9f       	mul	r22, r19
    1dac:	aa 27       	eor	r26, r26
    1dae:	f0 0d       	add	r31, r0
    1db0:	b1 1d       	adc	r27, r1
    1db2:	aa 1f       	adc	r26, r26
    1db4:	64 9f       	mul	r22, r20
    1db6:	66 27       	eor	r22, r22
    1db8:	b0 0d       	add	r27, r0
    1dba:	a1 1d       	adc	r26, r1
    1dbc:	66 1f       	adc	r22, r22
    1dbe:	82 9f       	mul	r24, r18
    1dc0:	22 27       	eor	r18, r18
    1dc2:	b0 0d       	add	r27, r0
    1dc4:	a1 1d       	adc	r26, r1
    1dc6:	62 1f       	adc	r22, r18
    1dc8:	73 9f       	mul	r23, r19
    1dca:	b0 0d       	add	r27, r0
    1dcc:	a1 1d       	adc	r26, r1
    1dce:	62 1f       	adc	r22, r18
    1dd0:	83 9f       	mul	r24, r19
    1dd2:	a0 0d       	add	r26, r0
    1dd4:	61 1d       	adc	r22, r1
    1dd6:	22 1f       	adc	r18, r18
    1dd8:	74 9f       	mul	r23, r20
    1dda:	33 27       	eor	r19, r19
    1ddc:	a0 0d       	add	r26, r0
    1dde:	61 1d       	adc	r22, r1
    1de0:	23 1f       	adc	r18, r19
    1de2:	84 9f       	mul	r24, r20
    1de4:	60 0d       	add	r22, r0
    1de6:	21 1d       	adc	r18, r1
    1de8:	82 2f       	mov	r24, r18
    1dea:	76 2f       	mov	r23, r22
    1dec:	6a 2f       	mov	r22, r26
    1dee:	11 24       	eor	r1, r1
    1df0:	9f 57       	subi	r25, 0x7F	; 127
    1df2:	50 40       	sbci	r21, 0x00	; 0
    1df4:	9a f0       	brmi	.+38     	; 0x1e1c <__mulsf3_pse+0x88>
    1df6:	f1 f0       	breq	.+60     	; 0x1e34 <__mulsf3_pse+0xa0>
    1df8:	88 23       	and	r24, r24
    1dfa:	4a f0       	brmi	.+18     	; 0x1e0e <__mulsf3_pse+0x7a>
    1dfc:	ee 0f       	add	r30, r30
    1dfe:	ff 1f       	adc	r31, r31
    1e00:	bb 1f       	adc	r27, r27
    1e02:	66 1f       	adc	r22, r22
    1e04:	77 1f       	adc	r23, r23
    1e06:	88 1f       	adc	r24, r24
    1e08:	91 50       	subi	r25, 0x01	; 1
    1e0a:	50 40       	sbci	r21, 0x00	; 0
    1e0c:	a9 f7       	brne	.-22     	; 0x1df8 <__mulsf3_pse+0x64>
    1e0e:	9e 3f       	cpi	r25, 0xFE	; 254
    1e10:	51 05       	cpc	r21, r1
    1e12:	80 f0       	brcs	.+32     	; 0x1e34 <__mulsf3_pse+0xa0>
    1e14:	0c 94 63 0e 	jmp	0x1cc6	; 0x1cc6 <__fp_inf>
    1e18:	0c 94 ae 0e 	jmp	0x1d5c	; 0x1d5c <__fp_szero>
    1e1c:	5f 3f       	cpi	r21, 0xFF	; 255
    1e1e:	e4 f3       	brlt	.-8      	; 0x1e18 <__mulsf3_pse+0x84>
    1e20:	98 3e       	cpi	r25, 0xE8	; 232
    1e22:	d4 f3       	brlt	.-12     	; 0x1e18 <__mulsf3_pse+0x84>
    1e24:	86 95       	lsr	r24
    1e26:	77 95       	ror	r23
    1e28:	67 95       	ror	r22
    1e2a:	b7 95       	ror	r27
    1e2c:	f7 95       	ror	r31
    1e2e:	e7 95       	ror	r30
    1e30:	9f 5f       	subi	r25, 0xFF	; 255
    1e32:	c1 f7       	brne	.-16     	; 0x1e24 <__mulsf3_pse+0x90>
    1e34:	fe 2b       	or	r31, r30
    1e36:	88 0f       	add	r24, r24
    1e38:	91 1d       	adc	r25, r1
    1e3a:	96 95       	lsr	r25
    1e3c:	87 95       	ror	r24
    1e3e:	97 f9       	bld	r25, 7
    1e40:	08 95       	ret

00001e42 <do_rand>:
    1e42:	cf 92       	push	r12
    1e44:	df 92       	push	r13
    1e46:	ef 92       	push	r14
    1e48:	ff 92       	push	r15
    1e4a:	cf 93       	push	r28
    1e4c:	df 93       	push	r29
    1e4e:	cd b7       	in	r28, 0x3d	; 61
    1e50:	de b7       	in	r29, 0x3e	; 62
    1e52:	2a 97       	sbiw	r28, 0x0a	; 10
    1e54:	0f b6       	in	r0, 0x3f	; 63
    1e56:	f8 94       	cli
    1e58:	de bf       	out	0x3e, r29	; 62
    1e5a:	0f be       	out	0x3f, r0	; 63
    1e5c:	cd bf       	out	0x3d, r28	; 61
    1e5e:	89 87       	std	Y+9, r24	; 0x09
    1e60:	9a 87       	std	Y+10, r25	; 0x0a
    1e62:	a9 85       	ldd	r26, Y+9	; 0x09
    1e64:	ba 85       	ldd	r27, Y+10	; 0x0a
    1e66:	2d 91       	ld	r18, X+
    1e68:	3d 91       	ld	r19, X+
    1e6a:	4d 91       	ld	r20, X+
    1e6c:	5c 91       	ld	r21, X
    1e6e:	29 83       	std	Y+1, r18	; 0x01
    1e70:	3a 83       	std	Y+2, r19	; 0x02
    1e72:	4b 83       	std	Y+3, r20	; 0x03
    1e74:	5c 83       	std	Y+4, r21	; 0x04
    1e76:	23 2b       	or	r18, r19
    1e78:	24 2b       	or	r18, r20
    1e7a:	25 2b       	or	r18, r21
    1e7c:	41 f4       	brne	.+16     	; 0x1e8e <do_rand+0x4c>
    1e7e:	24 e2       	ldi	r18, 0x24	; 36
    1e80:	39 ed       	ldi	r19, 0xD9	; 217
    1e82:	4b e5       	ldi	r20, 0x5B	; 91
    1e84:	57 e0       	ldi	r21, 0x07	; 7
    1e86:	29 83       	std	Y+1, r18	; 0x01
    1e88:	3a 83       	std	Y+2, r19	; 0x02
    1e8a:	4b 83       	std	Y+3, r20	; 0x03
    1e8c:	5c 83       	std	Y+4, r21	; 0x04
    1e8e:	69 81       	ldd	r22, Y+1	; 0x01
    1e90:	7a 81       	ldd	r23, Y+2	; 0x02
    1e92:	8b 81       	ldd	r24, Y+3	; 0x03
    1e94:	9c 81       	ldd	r25, Y+4	; 0x04
    1e96:	2d e1       	ldi	r18, 0x1D	; 29
    1e98:	33 ef       	ldi	r19, 0xF3	; 243
    1e9a:	41 e0       	ldi	r20, 0x01	; 1
    1e9c:	50 e0       	ldi	r21, 0x00	; 0
    1e9e:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <__divmodsi4>
    1ea2:	69 01       	movw	r12, r18
    1ea4:	7a 01       	movw	r14, r20
    1ea6:	a7 ea       	ldi	r26, 0xA7	; 167
    1ea8:	b1 e4       	ldi	r27, 0x41	; 65
    1eaa:	9b 01       	movw	r18, r22
    1eac:	ac 01       	movw	r20, r24
    1eae:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <__muluhisi3>
    1eb2:	69 83       	std	Y+1, r22	; 0x01
    1eb4:	7a 83       	std	Y+2, r23	; 0x02
    1eb6:	8b 83       	std	Y+3, r24	; 0x03
    1eb8:	9c 83       	std	Y+4, r25	; 0x04
    1eba:	ac ee       	ldi	r26, 0xEC	; 236
    1ebc:	b4 ef       	ldi	r27, 0xF4	; 244
    1ebe:	a7 01       	movw	r20, r14
    1ec0:	96 01       	movw	r18, r12
    1ec2:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__mulohisi3>
    1ec6:	9b 01       	movw	r18, r22
    1ec8:	ac 01       	movw	r20, r24
    1eca:	89 81       	ldd	r24, Y+1	; 0x01
    1ecc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ece:	ab 81       	ldd	r26, Y+3	; 0x03
    1ed0:	bc 81       	ldd	r27, Y+4	; 0x04
    1ed2:	82 0f       	add	r24, r18
    1ed4:	93 1f       	adc	r25, r19
    1ed6:	a4 1f       	adc	r26, r20
    1ed8:	b5 1f       	adc	r27, r21
    1eda:	b7 ff       	sbrs	r27, 7
    1edc:	03 c0       	rjmp	.+6      	; 0x1ee4 <do_rand+0xa2>
    1ede:	01 97       	sbiw	r24, 0x01	; 1
    1ee0:	a1 09       	sbc	r26, r1
    1ee2:	b0 48       	sbci	r27, 0x80	; 128
    1ee4:	e9 85       	ldd	r30, Y+9	; 0x09
    1ee6:	fa 85       	ldd	r31, Y+10	; 0x0a
    1ee8:	80 83       	st	Z, r24
    1eea:	91 83       	std	Z+1, r25	; 0x01
    1eec:	a2 83       	std	Z+2, r26	; 0x02
    1eee:	b3 83       	std	Z+3, r27	; 0x03
    1ef0:	9f 77       	andi	r25, 0x7F	; 127
    1ef2:	2a 96       	adiw	r28, 0x0a	; 10
    1ef4:	0f b6       	in	r0, 0x3f	; 63
    1ef6:	f8 94       	cli
    1ef8:	de bf       	out	0x3e, r29	; 62
    1efa:	0f be       	out	0x3f, r0	; 63
    1efc:	cd bf       	out	0x3d, r28	; 61
    1efe:	df 91       	pop	r29
    1f00:	cf 91       	pop	r28
    1f02:	ff 90       	pop	r15
    1f04:	ef 90       	pop	r14
    1f06:	df 90       	pop	r13
    1f08:	cf 90       	pop	r12
    1f0a:	08 95       	ret

00001f0c <rand_r>:
    1f0c:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <do_rand>
    1f10:	08 95       	ret

00001f12 <rand>:
    1f12:	88 e0       	ldi	r24, 0x08	; 8
    1f14:	91 e0       	ldi	r25, 0x01	; 1
    1f16:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <do_rand>
    1f1a:	08 95       	ret

00001f1c <srand>:
    1f1c:	b0 e0       	ldi	r27, 0x00	; 0
    1f1e:	a0 e0       	ldi	r26, 0x00	; 0
    1f20:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <next>
    1f24:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <next+0x1>
    1f28:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <next+0x2>
    1f2c:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <next+0x3>
    1f30:	08 95       	ret

00001f32 <eeprom_read_byte>:
    1f32:	f9 99       	sbic	0x1f, 1	; 31
    1f34:	fe cf       	rjmp	.-4      	; 0x1f32 <eeprom_read_byte>
    1f36:	92 bd       	out	0x22, r25	; 34
    1f38:	81 bd       	out	0x21, r24	; 33
    1f3a:	f8 9a       	sbi	0x1f, 0	; 31
    1f3c:	99 27       	eor	r25, r25
    1f3e:	80 b5       	in	r24, 0x20	; 32
    1f40:	08 95       	ret

00001f42 <eeprom_write_byte>:
    1f42:	26 2f       	mov	r18, r22

00001f44 <eeprom_write_r18>:
    1f44:	f9 99       	sbic	0x1f, 1	; 31
    1f46:	fe cf       	rjmp	.-4      	; 0x1f44 <eeprom_write_r18>
    1f48:	1f ba       	out	0x1f, r1	; 31
    1f4a:	92 bd       	out	0x22, r25	; 34
    1f4c:	81 bd       	out	0x21, r24	; 33
    1f4e:	20 bd       	out	0x20, r18	; 32
    1f50:	0f b6       	in	r0, 0x3f	; 63
    1f52:	f8 94       	cli
    1f54:	fa 9a       	sbi	0x1f, 2	; 31
    1f56:	f9 9a       	sbi	0x1f, 1	; 31
    1f58:	0f be       	out	0x3f, r0	; 63
    1f5a:	01 96       	adiw	r24, 0x01	; 1
    1f5c:	08 95       	ret

00001f5e <__divmodsi4>:
    1f5e:	05 2e       	mov	r0, r21
    1f60:	97 fb       	bst	r25, 7
    1f62:	1e f4       	brtc	.+6      	; 0x1f6a <__divmodsi4+0xc>
    1f64:	00 94       	com	r0
    1f66:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <__negsi2>
    1f6a:	57 fd       	sbrc	r21, 7
    1f6c:	07 d0       	rcall	.+14     	; 0x1f7c <__divmodsi4_neg2>
    1f6e:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <__udivmodsi4>
    1f72:	07 fc       	sbrc	r0, 7
    1f74:	03 d0       	rcall	.+6      	; 0x1f7c <__divmodsi4_neg2>
    1f76:	4e f4       	brtc	.+18     	; 0x1f8a <__divmodsi4_exit>
    1f78:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__negsi2>

00001f7c <__divmodsi4_neg2>:
    1f7c:	50 95       	com	r21
    1f7e:	40 95       	com	r20
    1f80:	30 95       	com	r19
    1f82:	21 95       	neg	r18
    1f84:	3f 4f       	sbci	r19, 0xFF	; 255
    1f86:	4f 4f       	sbci	r20, 0xFF	; 255
    1f88:	5f 4f       	sbci	r21, 0xFF	; 255

00001f8a <__divmodsi4_exit>:
    1f8a:	08 95       	ret

00001f8c <__negsi2>:
    1f8c:	90 95       	com	r25
    1f8e:	80 95       	com	r24
    1f90:	70 95       	com	r23
    1f92:	61 95       	neg	r22
    1f94:	7f 4f       	sbci	r23, 0xFF	; 255
    1f96:	8f 4f       	sbci	r24, 0xFF	; 255
    1f98:	9f 4f       	sbci	r25, 0xFF	; 255
    1f9a:	08 95       	ret

00001f9c <__muluhisi3>:
    1f9c:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__umulhisi3>
    1fa0:	a5 9f       	mul	r26, r21
    1fa2:	90 0d       	add	r25, r0
    1fa4:	b4 9f       	mul	r27, r20
    1fa6:	90 0d       	add	r25, r0
    1fa8:	a4 9f       	mul	r26, r20
    1faa:	80 0d       	add	r24, r0
    1fac:	91 1d       	adc	r25, r1
    1fae:	11 24       	eor	r1, r1
    1fb0:	08 95       	ret

00001fb2 <__mulshisi3>:
    1fb2:	b7 ff       	sbrs	r27, 7
    1fb4:	0c 94 ce 0f 	jmp	0x1f9c	; 0x1f9c <__muluhisi3>

00001fb8 <__mulohisi3>:
    1fb8:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <__muluhisi3>
    1fbc:	82 1b       	sub	r24, r18
    1fbe:	93 0b       	sbc	r25, r19
    1fc0:	08 95       	ret

00001fc2 <__udivmodsi4>:
    1fc2:	a1 e2       	ldi	r26, 0x21	; 33
    1fc4:	1a 2e       	mov	r1, r26
    1fc6:	aa 1b       	sub	r26, r26
    1fc8:	bb 1b       	sub	r27, r27
    1fca:	fd 01       	movw	r30, r26
    1fcc:	0d c0       	rjmp	.+26     	; 0x1fe8 <__udivmodsi4_ep>

00001fce <__udivmodsi4_loop>:
    1fce:	aa 1f       	adc	r26, r26
    1fd0:	bb 1f       	adc	r27, r27
    1fd2:	ee 1f       	adc	r30, r30
    1fd4:	ff 1f       	adc	r31, r31
    1fd6:	a2 17       	cp	r26, r18
    1fd8:	b3 07       	cpc	r27, r19
    1fda:	e4 07       	cpc	r30, r20
    1fdc:	f5 07       	cpc	r31, r21
    1fde:	20 f0       	brcs	.+8      	; 0x1fe8 <__udivmodsi4_ep>
    1fe0:	a2 1b       	sub	r26, r18
    1fe2:	b3 0b       	sbc	r27, r19
    1fe4:	e4 0b       	sbc	r30, r20
    1fe6:	f5 0b       	sbc	r31, r21

00001fe8 <__udivmodsi4_ep>:
    1fe8:	66 1f       	adc	r22, r22
    1fea:	77 1f       	adc	r23, r23
    1fec:	88 1f       	adc	r24, r24
    1fee:	99 1f       	adc	r25, r25
    1ff0:	1a 94       	dec	r1
    1ff2:	69 f7       	brne	.-38     	; 0x1fce <__udivmodsi4_loop>
    1ff4:	60 95       	com	r22
    1ff6:	70 95       	com	r23
    1ff8:	80 95       	com	r24
    1ffa:	90 95       	com	r25
    1ffc:	9b 01       	movw	r18, r22
    1ffe:	ac 01       	movw	r20, r24
    2000:	bd 01       	movw	r22, r26
    2002:	cf 01       	movw	r24, r30
    2004:	08 95       	ret

00002006 <_exit>:
    2006:	f8 94       	cli

00002008 <__stop_program>:
    2008:	ff cf       	rjmp	.-2      	; 0x2008 <__stop_program>
    200a:	be 02       	muls	r27, r30
    200c:	aa 02       	muls	r26, r26
    200e:	7e 02       	muls	r23, r30
    2010:	74 02       	muls	r23, r20
    2012:	7b 02       	muls	r23, r27
    2014:	18 03       	fmul	r17, r16
    2016:	0d 03       	fmul	r16, r21
    2018:	3e 0b       	sbc	r19, r30
    201a:	c2 09       	sbc	r28, r2
    201c:	c2 09       	sbc	r28, r2
    201e:	3b 0b       	sbc	r19, r27
    2020:	de 0a       	sbc	r13, r30
    2022:	da 0a       	sbc	r13, r26
    2024:	d6 0a       	sbc	r13, r22
    2026:	d2 0a       	sbc	r13, r18
    2028:	e1 0a       	sbc	r14, r17
    202a:	a9 0a       	sbc	r10, r25
    202c:	86 0a       	sbc	r8, r22
